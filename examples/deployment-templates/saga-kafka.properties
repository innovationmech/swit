# Kafka Broker 配置文件 - 用于 Saga 事件发布
# 用途: 生产环境 Kafka 集群配置
# 维护者: Swit Platform Team

############################# Server Basics #############################

# Broker ID (每个节点唯一)
broker.id=1

# Kafka 监听地址
# listeners: 内部监听地址
# advertised.listeners: 向客户端广告的地址
listeners=PLAINTEXT://0.0.0.0:9092
advertised.listeners=PLAINTEXT://kafka-1.prod.company.com:9092

# 网络线程数
# 建议: CPU 核数
num.network.threads=8

# I/O 线程数
# 建议: CPU 核数 * 2
num.io.threads=16

# Socket 缓冲区大小
socket.send.buffer.bytes=102400
socket.receive.buffer.bytes=102400
socket.request.max.bytes=104857600

# ========================== Zookeeper 配置 ==========================

# Zookeeper 连接地址
zookeeper.connect=zk-1.prod:2181,zk-2.prod:2181,zk-3.prod:2181

# Zookeeper 会话超时
zookeeper.session.timeout.ms=18000

# Zookeeper 连接超时
zookeeper.connection.timeout.ms=18000

############################# Log Basics #############################

# 日志目录
log.dirs=/var/lib/kafka/data

# 默认分区数
num.partitions=12

# 默认副本因子
default.replication.factor=3

# 最小同步副本数
min.insync.replicas=2

# Leader 不均衡容忍度
leader.imbalance.check.interval.seconds=300
leader.imbalance.per.broker.percentage=10
auto.leader.rebalance.enable=true

# ======================== 日志保留策略 =========================

# 日志保留时间 (小时)
# 168 小时 = 7 天
log.retention.hours=168

# 日志保留大小 (字节, -1 表示无限制)
log.retention.bytes=-1

# 日志段文件大小
# 1GB
log.segment.bytes=1073741824

# 日志保留检查间隔
log.retention.check.interval.ms=300000

# 日志段删除延迟
log.segment.delete.delay.ms=60000

############################# Log Flush Policy #############################

# 消息刷盘策略
# 依赖操作系统的 fsync,不推荐设置太小的值
log.flush.interval.messages=10000
log.flush.interval.ms=1000

# 日志刷盘调度器间隔
log.flush.scheduler.interval.ms=2000

############################# Replica 配置 #############################

# Follower 副本从 Leader 拉取的最大字节数
replica.fetch.max.bytes=1048576

# Follower 副本拉取响应最大时间
replica.fetch.wait.max.ms=500

# 副本滞后时间阈值
replica.lag.time.max.ms=10000

# 副本 Socket 超时
replica.socket.timeout.ms=30000

# 副本 Socket 接收缓冲区
replica.socket.receive.buffer.bytes=65536

############################# 压缩配置 #############################

# 压缩类型: none, gzip, snappy, lz4, zstd
compression.type=snappy

# 日志清理策略: delete (删除), compact (压缩)
log.cleanup.policy=delete

# 压缩线程数
log.cleaner.threads=2

# 压缩开启条件
log.cleaner.io.max.bytes.per.second=1.7976931348623157E308
log.cleaner.dedupe.buffer.size=134217728
log.cleaner.io.buffer.size=524288
log.cleaner.io.buffer.load.factor=0.9

# 脏数据比例阈值
log.cleaner.min.cleanable.ratio=0.5

# 压缩延迟
log.cleaner.min.compaction.lag.ms=0

# 最大压缩延迟
log.cleaner.max.compaction.lag.ms=9223372036854775807

# 删除标记保留时间
log.cleaner.delete.retention.ms=86400000

############################# Group Coordinator 配置 #############################

# Group 协调器配置
group.initial.rebalance.delay.ms=3000
group.max.session.timeout.ms=1800000
group.min.session.timeout.ms=6000

############################# Controlled Shutdown #############################

# 受控关闭
controlled.shutdown.enable=true
controlled.shutdown.max.retries=3
controlled.shutdown.retry.backoff.ms=5000

############################# 事务配置 #############################

# 事务状态日志
transaction.state.log.replication.factor=3
transaction.state.log.min.isr=2
transaction.state.log.num.partitions=50

# 事务超时
transaction.max.timeout.ms=900000
transactional.id.expiration.ms=604800000

############################# Producer 配置建议 #############################

# 生产者端配置 (在应用端设置,这里仅作参考)
#
# acks=all
# 等待所有副本确认,确保数据可靠性
#
# retries=10
# 重试次数
#
# max.in.flight.requests.per.connection=1
# 确保消息顺序性
#
# enable.idempotence=true
# 启用幂等性
#
# compression.type=snappy
# 使用压缩减少网络传输
#
# batch.size=16384
# 批量大小
#
# linger.ms=10
# 批量等待时间
#
# buffer.memory=33554432
# 缓冲区大小

############################# Consumer 配置建议 #############################

# 消费者端配置 (在应用端设置,这里仅作参考)
#
# enable.auto.commit=false
# 禁用自动提交,手动控制偏移量
#
# auto.offset.reset=earliest
# 从最早的消息开始消费
#
# fetch.min.bytes=1
# 最小拉取字节数
#
# fetch.max.wait.ms=500
# 最大拉取等待时间
#
# max.partition.fetch.bytes=1048576
# 每个分区最大拉取字节数

############################# 主题默认配置 #############################

# 自动创建主题
auto.create.topics.enable=false

# 删除主题
delete.topic.enable=true

# Unclean Leader 选举
unclean.leader.election.enable=false

############################# 配额和限流 #############################

# 生产者配额 (字节/秒)
# quota.producer.default=10485760

# 消费者配额 (字节/秒)
# quota.consumer.default=10485760

# 请求配额 (请求数/秒)
# quota.window.num=11
# quota.window.size.seconds=1

############################# 指标 #############################

# 启用 JMX
# export KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote \
#   -Dcom.sun.management.jmxremote.authenticate=false \
#   -Dcom.sun.management.jmxremote.ssl=false \
#   -Djava.rmi.server.hostname=kafka-1.prod \
#   -Dcom.sun.management.jmxremote.port=9999"

# 指标采样窗口
metrics.sample.window.ms=30000

# 指标采样数量
metrics.num.samples=2

# 指标记录级别: INFO, DEBUG
metrics.recording.level=INFO

############################# SSL 配置 (可选) #############################

# 启用 SSL
# listeners=SSL://0.0.0.0:9093
# advertised.listeners=SSL://kafka-1.prod.company.com:9093

# SSL 协议
# ssl.protocol=TLSv1.2

# SSL 密钥库
# ssl.keystore.location=/etc/kafka/secrets/kafka.server.keystore.jks
# ssl.keystore.password=changeme
# ssl.key.password=changeme

# SSL 信任库
# ssl.truststore.location=/etc/kafka/secrets/kafka.server.truststore.jks
# ssl.truststore.password=changeme

# 客户端认证: none, required, requested
# ssl.client.auth=required

# SSL 端点识别算法
# ssl.endpoint.identification.algorithm=https

############################# SASL 配置 (可选) #############################

# 启用 SASL
# listeners=SASL_PLAINTEXT://0.0.0.0:9092
# advertised.listeners=SASL_PLAINTEXT://kafka-1.prod.company.com:9092

# SASL 机制: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512
# sasl.enabled.mechanisms=SCRAM-SHA-512
# sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512

# JAAS 配置
# sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
#   username="admin" \
#   password="admin-secret";

############################# ACL 配置 (可选) #############################

# 启用 ACL
# authorizer.class.name=kafka.security.authorizer.AclAuthorizer

# 超级用户
# super.users=User:admin

# 允许所有人
# allow.everyone.if.no.acl.found=false

############################# Rack 配置 (可选) #############################

# Rack ID (用于跨机架部署)
# broker.rack=rack1

############################# 性能调优建议 #############################

# 1. 操作系统优化:
#    - 增加文件描述符限制: ulimit -n 100000
#    - 配置 vm.swappiness=1
#    - 增加 socket 缓冲区: 
#      net.core.rmem_max=134217728
#      net.core.wmem_max=134217728
#      net.ipv4.tcp_rmem=4096 87380 134217728
#      net.ipv4.tcp_wmem=4096 65536 134217728
#
# 2. JVM 优化:
#    - 设置堆内存: -Xms6g -Xmx6g
#    - 使用 G1GC: -XX:+UseG1GC
#    - 设置 GC 日志: -Xloggc:/var/log/kafka/gc.log
#    - 启用 GC 详细信息: -XX:+PrintGCDetails
#
# 3. Kafka 优化:
#    - 增加网络和 I/O 线程
#    - 使用 RAID10 存储日志
#    - 合理设置分区数和副本数
#    - 启用压缩减少存储和网络开销
#
# 4. 生产者优化:
#    - 使用批量发送
#    - 启用压缩
#    - 启用幂等性
#    - 合理设置 acks 和 retries
#
# 5. 消费者优化:
#    - 增加分区数提高并行度
#    - 使用消费者组
#    - 手动提交偏移量
#    - 批量拉取消息

############################# 监控指标 #############################

# 关键监控指标:
# - 消息吞吐量: BytesInPerSec, BytesOutPerSec
# - 请求速率: RequestsPerSec
# - 副本滞后: ReplicaMaxLag
# - ISR 收缩: IsrShrinksPerSec
# - 分区数: PartitionCount
# - Leader 数: LeaderCount
# - 离线分区: OfflinePartitionsCount
# - 活跃控制器: ActiveControllerCount
# - 请求队列大小: RequestQueueSize
# - 网络线程空闲率: NetworkProcessorAvgIdlePercent
# - 磁盘空间: LogSize

# 使用 Kafka Exporter 导出 Prometheus 指标:
# docker run -p 9308:9308 danielqsj/kafka-exporter \
#   --kafka.server=kafka-1:9092 \
#   --kafka.server=kafka-2:9092 \
#   --kafka.server=kafka-3:9092

############################# 维护建议 #############################

# 1. 定期清理:
#    - 清理过期日志
#    - 清理失效分区
#    - 压缩主题
#
# 2. 容量规划:
#    - 监控磁盘使用率
#    - 预留至少 20% 空闲磁盘
#    - 根据增长趋势扩容
#
# 3. 备份策略:
#    - 使用 MirrorMaker 跨集群复制
#    - 定期备份 Zookeeper 数据
#    - 导出主题配置
#
# 4. 升级流程:
#    - 滚动升级 Broker
#    - 先升级一个节点并观察
#    - 验证功能正常后升级其他节点
#
# 5. 故障处理:
#    - 监控告警及时响应
#    - 保存日志用于分析
#    - 建立故障恢复流程

############################# Saga 专用主题建议 #############################

# 为 Saga 事件创建专用主题:
#
# kafka-topics.sh --create \
#   --bootstrap-server kafka-1:9092 \
#   --topic saga-events-prod \
#   --partitions 12 \
#   --replication-factor 3 \
#   --config min.insync.replicas=2 \
#   --config compression.type=snappy \
#   --config retention.ms=604800000 \  # 7 days
#   --config segment.ms=86400000       # 1 day

# 为死信队列创建主题:
#
# kafka-topics.sh --create \
#   --bootstrap-server kafka-1:9092 \
#   --topic saga-events-dlq \
#   --partitions 3 \
#   --replication-factor 3 \
#   --config retention.ms=2592000000  # 30 days

