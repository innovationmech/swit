# Redis 配置文件 - 用于 Saga 状态存储
# 用途: 生产环境 Redis 集群配置
# 维护者: Swit Platform Team

# ============================================================================
# 网络配置
# ============================================================================
# 绑定地址
bind 0.0.0.0

# 端口
port 6379

# TCP 连接队列
tcp-backlog 511

# 客户端超时 (0 = 禁用)
timeout 300

# TCP keep-alive
tcp-keepalive 300

# ============================================================================
# 通用配置
# ============================================================================
# 守护进程模式
daemonize no

# PID 文件
pidfile /var/run/redis_6379.pid

# 日志级别: debug, verbose, notice, warning
loglevel notice

# 日志文件
logfile /var/log/redis/redis.log

# 数据库数量
databases 16

# 显示 Logo
always-show-logo yes

# ============================================================================
# 快照配置 (RDB)
# ============================================================================
# 保存策略: save <seconds> <changes>
# 900秒内至少1个key改变
save 900 1
# 300秒内至少10个key改变
save 300 10
# 60秒内至少10000个key改变
save 60 10000

# RDB 压缩
rdbcompression yes

# RDB 校验
rdbchecksum yes

# RDB 文件名
dbfilename dump.rdb

# 工作目录
dir /var/lib/redis

# 保存失败时停止写入
stop-writes-on-bgsave-error yes

# ============================================================================
# AOF 配置 (Append Only File)
# ============================================================================
# 启用 AOF
appendonly yes

# AOF 文件名
appendfilename "appendonly.aof"

# AOF 同步策略: always, everysec, no
# always: 每次写入都同步,最安全但最慢
# everysec: 每秒同步,推荐
# no: 由操作系统决定,最快但可能丢失数据
appendfsync everysec

# 重写时不执行 fsync
no-appendfsync-on-rewrite no

# AOF 自动重写配置
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# AOF 加载时容错
aof-load-truncated yes

# 使用 RDB-AOF 混合持久化
aof-use-rdb-preamble yes

# ============================================================================
# 复制配置
# ============================================================================
# 主节点地址 (从节点配置)
# replicaof <masterip> <masterport>

# 主节点密码 (从节点配置)
# masterauth <master-password>

# 从节点只读
replica-read-only yes

# 复制超时
repl-timeout 60

# 复制期间禁用 TCP_NODELAY
repl-disable-tcp-nodelay no

# 复制积压缓冲区大小
repl-backlog-size 1mb

# 复制积压缓冲区 TTL
repl-backlog-ttl 3600

# 从节点优先级
replica-priority 100

# ============================================================================
# 安全配置
# ============================================================================
# 密码认证
requirepass changeme

# 重命名危险命令
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command CONFIG "CONFIG-4527d4a8c6e9b"
rename-command SHUTDOWN "SHUTDOWN-4527d4a8c6e9b"

# 保护模式
protected-mode yes

# ============================================================================
# 客户端配置
# ============================================================================
# 最大客户端连接数
maxclients 10000

# ============================================================================
# 内存配置
# ============================================================================
# 最大内存 (根据实际硬件调整)
maxmemory 8gb

# 内存淘汰策略
# noeviction: 不淘汰,写满后报错
# allkeys-lru: 在所有 key 中使用 LRU 淘汰
# allkeys-lfu: 在所有 key 中使用 LFU 淘汰
# volatile-lru: 在设置了过期时间的 key 中使用 LRU 淘汰
# volatile-lfu: 在设置了过期时间的 key 中使用 LFU 淘汰
# allkeys-random: 在所有 key 中随机淘汰
# volatile-random: 在设置了过期时间的 key 中随机淘汰
# volatile-ttl: 淘汰 TTL 最小的 key
maxmemory-policy allkeys-lru

# LRU/LFU 样本数
maxmemory-samples 5

# ============================================================================
# 懒删除 / 惰性释放
# ============================================================================
# 过期 key 删除
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no

# 从节点懒删除
replica-lazy-flush no

# ============================================================================
# 线程 I/O
# ============================================================================
# I/O 线程数 (Redis 6.0+)
# 建议设置为 CPU 核数的一半
io-threads 4

# 启用 I/O 线程读写
io-threads-do-reads yes

# ============================================================================
# 内核优化
# ============================================================================
# 启用 transparent huge pages
# 注意: 需要在操作系统层面配置
# echo never > /sys/kernel/mm/transparent_hugepage/enabled

# ============================================================================
# 慢查询日志
# ============================================================================
# 慢查询阈值 (微秒)
slowlog-log-slower-than 10000

# 慢查询日志长度
slowlog-max-len 128

# ============================================================================
# 延迟监控
# ============================================================================
# 延迟监控阈值 (毫秒)
latency-monitor-threshold 100

# ============================================================================
# 事件通知
# ============================================================================
# 键空间通知
# K: 键空间通知
# E: 键事件通知
# g: DEL, EXPIRE, RENAME 等通用命令
# $: String 命令
# l: List 命令
# s: Set 命令
# h: Hash 命令
# z: Sorted set 命令
# x: 过期事件
# e: 驱逐事件
# A: g$lshzxe 的别名
notify-keyspace-events ""

# ============================================================================
# 高级配置
# ============================================================================
# Hash 编码优化
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List 编码优化
list-max-ziplist-size -2
list-compress-depth 0

# Set 编码优化
set-max-intset-entries 512

# Sorted Set 编码优化
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog 稀疏表示
hll-sparse-max-bytes 3000

# Stream 宏节点
stream-node-max-bytes 4096
stream-node-max-entries 100

# 活跃碎片整理
activerehashing yes

# 客户端输出缓冲区限制
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# 频率
hz 10

# 动态 hz
dynamic-hz yes

# ============================================================================
# 集群配置
# ============================================================================
# 启用集群模式
cluster-enabled yes

# 集群配置文件
cluster-config-file nodes-6379.conf

# 集群节点超时 (毫秒)
cluster-node-timeout 5000

# 故障转移投票超时
cluster-replica-validity-factor 10

# 迁移屏障
cluster-migration-barrier 1

# 集群要求所有节点可用
cluster-require-full-coverage yes

# 从节点故障转移超时
cluster-replica-no-failover no

# ============================================================================
# TLS/SSL 配置 (可选)
# ============================================================================
# 启用 TLS
# port 0
# tls-port 6379

# TLS 证书
# tls-cert-file /etc/certs/redis.crt
# tls-key-file /etc/certs/redis.key
# tls-ca-cert-file /etc/certs/ca.crt

# TLS 认证
# tls-auth-clients yes

# TLS 协议
# tls-protocols "TLSv1.2 TLSv1.3"

# TLS 密码套件
# tls-ciphers DEFAULT:!MEDIUM

# TLS 优先使用服务器密码
# tls-prefer-server-ciphers yes

# ============================================================================
# Docker / Kubernetes 配置
# ============================================================================
# 在容器环境中,通常需要:
# 1. 设置 bind 0.0.0.0 允许外部连接
# 2. 设置 protected-mode no (如果在信任网络)
# 3. 通过环境变量或 Secret 设置 requirepass
# 4. 禁用 daemonize (容器需要前台运行)
# 5. 将日志输出到 stdout

# ============================================================================
# 监控和诊断
# ============================================================================
# 启用统计信息
# INFO 命令会返回详细统计

# 使用 Redis Exporter 导出 Prometheus 指标
# docker run -p 9121:9121 oliver006/redis_exporter \
#   --redis.addr=redis://redis:6379 \
#   --redis.password=changeme

# ============================================================================
# 性能调优建议
# ============================================================================
# 1. 内存优化:
#    - 根据数据量设置合适的 maxmemory
#    - 选择合适的淘汰策略
#    - 使用压缩编码减少内存占用
#
# 2. 持久化优化:
#    - 生产环境建议启用 AOF
#    - 使用 everysec 平衡性能和可靠性
#    - 定期备份 RDB 文件
#
# 3. 网络优化:
#    - 增加 tcp-backlog
#    - 启用 I/O 多线程 (Redis 6.0+)
#    - 使用 Pipeline 批量操作
#
# 4. 集群优化:
#    - 合理设置分片数量
#    - 配置主从复制
#    - 使用哨兵实现自动故障转移
#
# 5. 操作系统优化:
#    - 禁用 transparent huge pages
#    - 增加文件描述符限制
#    - 配置 overcommit_memory=1
#    - 禁用 swap

# ============================================================================
# 维护建议
# ============================================================================
# 1. 监控关键指标:
#    - 内存使用率
#    - 命令执行频率
#    - 慢查询
#    - 连接数
#    - 键空间命中率
#
# 2. 定期维护:
#    - 清理过期 key
#    - 备份数据
#    - 检查主从同步状态
#    - 分析慢查询日志
#
# 3. 安全措施:
#    - 设置强密码
#    - 限制危险命令
#    - 使用防火墙限制访问
#    - 启用 TLS 加密传输

