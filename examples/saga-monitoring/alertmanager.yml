# Alertmanager configuration for Saga monitoring

global:
  # Timeout for resolving alerts
  resolve_timeout: 5m
  
  # SMTP settings for email notifications (configure with your SMTP server)
  # smtp_smarthost: 'smtp.example.com:587'
  # smtp_from: 'alertmanager@example.com'
  # smtp_auth_username: 'alertmanager@example.com'
  # smtp_auth_password: 'password'
  # smtp_require_tls: true

# Templates for alert notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route configuration
route:
  # Group alerts by these labels
  group_by: ['alertname', 'cluster', 'severity']
  
  # How long to wait before sending the first notification
  group_wait: 10s
  
  # How long to wait before sending another notification for the same group
  group_interval: 10s
  
  # How long to wait before re-sending a notification
  repeat_interval: 3h
  
  # Default receiver
  receiver: 'default'
  
  # Child routes with specific matching rules
  routes:
    # Critical alerts - send immediately
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 5s
      repeat_interval: 30m
      continue: true  # Also send to default receiver
    
    # Warning alerts
    - match:
        severity: warning
      receiver: 'warning-alerts'
      group_wait: 30s
      repeat_interval: 2h
    
    # Saga-specific alerts
    - match:
        component: saga
      receiver: 'saga-team'
      group_by: ['alertname', 'saga_type']
    
    # Storage/database alerts
    - match_re:
        component: (storage|database|postgres|redis)
      receiver: 'storage-team'
    
    # Messaging alerts
    - match:
        component: messaging
      receiver: 'messaging-team'

# Inhibit rules - suppress certain alerts when others are firing
inhibit_rules:
  # Suppress warning if critical alert is firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'cluster', 'service']
  
  # Suppress saga execution alerts if service is down
  - source_match:
      alertname: 'SagaServiceDown'
    target_match_re:
      alertname: '(HighSagaFailureRate|SlowSagaExecution|NoSagaActivity)'
    equal: ['instance']

# Receivers configuration
receivers:
  # Default receiver (logs only)
  - name: 'default'
    webhook_configs:
      - url: 'http://localhost:5001/webhook'
        send_resolved: true
  
  # Critical alerts receiver
  - name: 'critical-alerts'
    # Email configuration
    # email_configs:
    #   - to: 'oncall@example.com'
    #     from: 'alertmanager@example.com'
    #     headers:
    #       Subject: '[CRITICAL] {{ .GroupLabels.alertname }}'
    #     html: '{{ template "email.default.html" . }}'
    
    # Slack configuration
    # slack_configs:
    #   - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    #     channel: '#critical-alerts'
    #     title: '[CRITICAL] {{ .GroupLabels.alertname }}'
    #     text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
    #     send_resolved: true
    
    # PagerDuty configuration
    # pagerduty_configs:
    #   - service_key: 'YOUR_PAGERDUTY_SERVICE_KEY'
    #     description: '{{ .GroupLabels.alertname }}'
    #     severity: 'critical'
    
    # Webhook for custom integration
    webhook_configs:
      - url: 'http://localhost:5001/webhook/critical'
        send_resolved: true
        http_config:
          basic_auth:
            username: 'alertmanager'
            password: 'secret'
  
  # Warning alerts receiver
  - name: 'warning-alerts'
    # Slack configuration
    # slack_configs:
    #   - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    #     channel: '#warning-alerts'
    #     title: '[WARNING] {{ .GroupLabels.alertname }}'
    #     text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
    
    webhook_configs:
      - url: 'http://localhost:5001/webhook/warning'
        send_resolved: true
  
  # Saga team receiver
  - name: 'saga-team'
    # Email to saga team
    # email_configs:
    #   - to: 'saga-team@example.com'
    #     from: 'alertmanager@example.com'
    #     headers:
    #       Subject: '[SAGA] {{ .GroupLabels.alertname }}'
    
    # Slack to saga channel
    # slack_configs:
    #   - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    #     channel: '#saga-alerts'
    #     title: '{{ .GroupLabels.alertname }}'
    #     text: '{{ range .Alerts }}{{ .Annotations.summary }}: {{ .Annotations.description }}{{ end }}'
    
    webhook_configs:
      - url: 'http://localhost:5001/webhook/saga'
        send_resolved: true
  
  # Storage team receiver
  - name: 'storage-team'
    webhook_configs:
      - url: 'http://localhost:5001/webhook/storage'
        send_resolved: true
  
  # Messaging team receiver
  - name: 'messaging-team'
    webhook_configs:
      - url: 'http://localhost:5001/webhook/messaging'
        send_resolved: true

