#!/bin/bash

# 分布式追踪数据生成工具
# Copyright (c) 2024 SWIT Framework Authors

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_FILE="$PROJECT_ROOT/scripts/config/demo-config.env"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${PURPLE}[TRACE-GEN]${NC} $1"
}

# 显示欢迎信息
show_welcome() {
    echo "======================================================================"
    echo -e "${BLUE}🎯 SWIT 框架分布式追踪数据生成工具${NC}"
    echo "======================================================================"
    echo -e "${YELLOW}本工具用于生成各种类型的追踪数据：${NC}"
    echo "  📝 模拟真实业务场景"
    echo "  🔄 生成大量测试数据"
    echo "  ⚡ 支持异步并发请求"
    echo "  🎲 随机化参数配置"
    echo "  📊 实时进度显示"
    echo
}

# 显示使用说明
show_usage() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -h, --help              显示帮助信息"
    echo "  -s, --scenario=NAME     生成场景 (默认: mixed)"
    echo "                          可选: order, payment, inventory, mixed, error"
    echo "  -n, --count=N           生成数据条数 (默认: 100)"
    echo "  -c, --concurrency=N     并发度 (默认: 5)"
    echo "  -d, --duration=SECONDS  生成持续时间 (与count二选一)"
    echo "  -r, --rate=RPS          生成速率 (请求/秒, 默认: 10)"
    echo "  --min-delay=MS          最小请求延迟 (毫秒, 默认: 100)"
    echo "  --max-delay=MS          最大请求延迟 (毫秒, 默认: 1000)"
    echo "  --error-rate=PERCENT    错误率百分比 (0-100, 默认: 5)"
    echo "  --output=FILE           输出统计到文件"
    echo "  --dry-run               仅显示将要生成的数据，不实际发送"
    echo "  --verbose               详细输出"
    echo "  --quiet                 静默模式"
    echo
    echo "Scenarios:"
    echo "  order       订单创建场景 (订单->支付->库存)"
    echo "  payment     支付处理场景"
    echo "  inventory   库存查询/更新场景"
    echo "  mixed       混合场景 (随机选择上述场景)"
    echo "  error       错误模拟场景 (故意触发各种错误)"
    echo
    echo "Examples:"
    echo "  $0                                  # 生成100条混合场景数据"
    echo "  $0 -s order -n 500 -c 10          # 并发10生成500条订单数据"
    echo "  $0 -d 300 -r 50 --error-rate=10   # 50RPS生成5分钟，10%错误率"
    echo "  $0 --dry-run -s error              # 预览错误场景数据"
    echo "  $0 -s mixed --output=stats.json   # 生成数据并保存统计信息"
}

# 加载配置
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        log_info "正在加载配置文件: $CONFIG_FILE"
        source "$CONFIG_FILE"
    else
        log_warning "配置文件不存在: $CONFIG_FILE，使用默认配置"
    fi
    
    # 默认配置
    ORDER_SERVICE_URL=${ORDER_SERVICE_URL:-"http://localhost:8081"}
    PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL:-"http://localhost:8082"}
    INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL:-"http://localhost:8083"}
}

# 检查依赖
check_dependencies() {
    local missing_tools=()
    
    for tool in curl jq bc; do
        if ! command -v $tool &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "缺少必需工具: ${missing_tools[*]}"
        echo "安装方法："
        echo "  macOS: brew install curl jq bc"
        echo "  Ubuntu: sudo apt-get install curl jq bc"
        exit 1
    fi
}

# 检查服务状态
check_services() {
    if [ "$DRY_RUN" = "true" ]; then
        log_info "干跑模式，跳过服务检查"
        return 0
    fi
    
    log_header "检查服务状态"
    
    local services=(
        "$ORDER_SERVICE_URL/health:订单服务"
        "$PAYMENT_SERVICE_URL/health:支付服务"
        "$INVENTORY_SERVICE_URL/health:库存服务"
    )
    
    local failed_services=()
    
    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        
        if curl -f -s --connect-timeout 5 "$url" > /dev/null 2>&1; then
            log_success "$name 运行正常"
        else
            log_warning "$name 无法访问: $url"
            failed_services+=("$name")
        fi
    done
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        log_error "以下服务无法访问: ${failed_services[*]}"
        log_info "请先启动服务: ./scripts/start.sh"
        
        if [ "$FORCE" != "true" ]; then
            exit 1
        else
            log_warning "强制模式，继续执行（可能导致错误）"
        fi
    fi
    
    log_success "服务检查完成"
}

# 生成测试数据
generate_test_data() {
    # 创建测试用的客户和产品数据
    cat << 'EOF'
{
    "customers": [
        {"id": "customer-001", "name": "张三", "email": "zhangsan@example.com", "phone": "13800138001"},
        {"id": "customer-002", "name": "李四", "email": "lisi@example.com", "phone": "13800138002"},
        {"id": "customer-003", "name": "王五", "email": "wangwu@example.com", "phone": "13800138003"},
        {"id": "customer-004", "name": "赵六", "email": "zhaoliu@example.com", "phone": "13800138004"},
        {"id": "customer-005", "name": "孙七", "email": "sunqi@example.com", "phone": "13800138005"},
        {"id": "customer-006", "name": "周八", "email": "zhouba@example.com", "phone": "13800138006"},
        {"id": "customer-007", "name": "吴九", "email": "wujiu@example.com", "phone": "13800138007"},
        {"id": "customer-008", "name": "郑十", "email": "zhengshi@example.com", "phone": "13800138008"}
    ],
    "products": [
        {"id": "product-001", "name": "笔记本电脑", "price": 5999.99, "stock": 100, "category": "electronics"},
        {"id": "product-002", "name": "智能手机", "price": 2999.99, "stock": 200, "category": "electronics"},
        {"id": "product-003", "name": "无线耳机", "price": 299.99, "stock": 500, "category": "electronics"},
        {"id": "product-004", "name": "咖啡豆", "price": 89.99, "stock": 1000, "category": "food"},
        {"id": "product-005", "name": "保温杯", "price": 129.99, "stock": 300, "category": "household"},
        {"id": "product-006", "name": "运动鞋", "price": 699.99, "stock": 150, "category": "clothing"},
        {"id": "product-007", "name": "图书", "price": 49.99, "stock": 800, "category": "books"},
        {"id": "product-008", "name": "护肤品", "price": 199.99, "stock": 400, "category": "beauty"}
    ]
}
EOF
}

# 生成订单数据
generate_order_request() {
    local customer_id="$1"
    local product_id="$2"
    local quantity="$3"
    local should_error="$4"
    
    if [ "$should_error" = "true" ]; then
        # 故意生成会导致错误的数据
        case $((RANDOM % 3)) in
            0) customer_id="invalid-customer" ;;
            1) product_id="invalid-product" ;;
            2) quantity=0 ;;
        esac
    fi
    
    local amount=$(echo "$quantity * 99.99" | bc -l)
    
    cat << EOF
{
    "customer_id": "$customer_id",
    "product_id": "$product_id", 
    "quantity": $quantity,
    "amount": $amount,
    "source": "trace-generator",
    "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
}
EOF
}

# 生成支付数据
generate_payment_request() {
    local customer_id="$1"
    local amount="$2"
    local should_error="$3"
    
    if [ "$should_error" = "true" ]; then
        # 故意生成会导致支付失败的数据
        case $((RANDOM % 2)) in
            0) amount="-1" ;;
            1) customer_id="blocked-customer" ;;
        esac
    fi
    
    cat << EOF
{
    "customer_id": "$customer_id",
    "amount": $amount,
    "payment_method": "credit_card",
    "currency": "CNY",
    "description": "由追踪生成器生成的测试支付",
    "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
}
EOF
}

# 生成库存查询/更新数据
generate_inventory_request() {
    local product_id="$1"
    local operation="$2"
    local quantity="$3"
    local should_error="$4"
    
    if [ "$should_error" = "true" ]; then
        case $((RANDOM % 2)) in
            0) product_id="nonexistent-product" ;;
            1) quantity="99999" ;;  # 库存不足
        esac
    fi
    
    case "$operation" in
        "check")
            cat << EOF
{
    "product_id": "$product_id",
    "operation": "check",
    "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
}
EOF
            ;;
        "reserve")
            cat << EOF
{
    "product_id": "$product_id",
    "operation": "reserve",
    "quantity": $quantity,
    "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
}
EOF
            ;;
    esac
}

# 发送请求
send_request() {
    local method="$1"
    local url="$2"
    local data="$3"
    local request_id="$4"
    
    if [ "$DRY_RUN" = "true" ]; then
        if [ "$VERBOSE" = "true" ]; then
            echo "[$request_id] 模拟请求: $method $url"
            echo "数据: $data"
        fi
        return 0
    fi
    
    local start_time=$(date +%s%3N)
    local response_code
    
    if [ "$method" = "POST" ]; then
        response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-Request-ID: $request_id" \
            -d "$data" \
            --connect-timeout 10 \
            --max-time 30 \
            "$url" 2>/dev/null || echo "000")
    else
        response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET \
            -H "X-Request-ID: $request_id" \
            --connect-timeout 10 \
            --max-time 30 \
            "$url" 2>/dev/null || echo "000")
    fi
    
    local end_time=$(date +%s%3N)
    local duration=$((end_time - start_time))
    
    # 更新统计
    if [[ "$response_code" =~ ^2[0-9][0-9]$ ]]; then
        ((STATS_SUCCESS++))
    else
        ((STATS_ERROR++))
    fi
    
    ((STATS_TOTAL++))
    STATS_TOTAL_DURATION=$((STATS_TOTAL_DURATION + duration))
    
    if [ "$VERBOSE" = "true" ]; then
        echo "[$request_id] $method $url -> $response_code (${duration}ms)"
    fi
    
    return 0
}

# 生成订单场景
generate_order_scenario() {
    local should_error="$1"
    local request_id="trace-gen-$(date +%s)-$RANDOM"
    
    local test_data
    test_data=$(generate_test_data)
    
    # 随机选择客户和产品
    local customers=($(echo "$test_data" | jq -r '.customers[].id'))
    local products=($(echo "$test_data" | jq -r '.products[].id'))
    
    local customer_id=${customers[$RANDOM % ${#customers[@]}]}
    local product_id=${products[$RANDOM % ${#products[@]}]}
    local quantity=$((RANDOM % 5 + 1))
    
    # 1. 创建订单
    local order_data
    order_data=$(generate_order_request "$customer_id" "$product_id" "$quantity" "$should_error")
    send_request "POST" "$ORDER_SERVICE_URL/api/v1/orders" "$order_data" "$request_id"
    
    # 随机延迟模拟真实场景
    local delay=$((RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY))
    sleep $(echo "scale=3; $delay / 1000" | bc)
}

# 生成支付场景
generate_payment_scenario() {
    local should_error="$1"
    local request_id="trace-gen-$(date +%s)-$RANDOM"
    
    local test_data
    test_data=$(generate_test_data)
    
    local customers=($(echo "$test_data" | jq -r '.customers[].id'))
    local customer_id=${customers[$RANDOM % ${#customers[@]}]}
    local amount=$(echo "scale=2; $RANDOM * 0.01 + 10" | bc)
    
    local payment_data
    payment_data=$(generate_payment_request "$customer_id" "$amount" "$should_error")
    send_request "POST" "$PAYMENT_SERVICE_URL/api/v1/payments" "$payment_data" "$request_id"
    
    local delay=$((RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY))
    sleep $(echo "scale=3; $delay / 1000" | bc)
}

# 生成库存场景
generate_inventory_scenario() {
    local should_error="$1"
    local request_id="trace-gen-$(date +%s)-$RANDOM"
    
    local test_data
    test_data=$(generate_test_data)
    
    local products=($(echo "$test_data" | jq -r '.products[].id'))
    local product_id=${products[$RANDOM % ${#products[@]}]}
    local operation="check"
    
    # 随机选择操作类型
    if [ $((RANDOM % 2)) -eq 0 ]; then
        operation="reserve"
    fi
    
    local quantity=$((RANDOM % 10 + 1))
    
    if [ "$operation" = "check" ]; then
        send_request "GET" "$INVENTORY_SERVICE_URL/api/v1/inventory/$product_id" "" "$request_id"
    else
        local inventory_data
        inventory_data=$(generate_inventory_request "$product_id" "$operation" "$quantity" "$should_error")
        send_request "POST" "$INVENTORY_SERVICE_URL/api/v1/inventory/reserve" "$inventory_data" "$request_id"
    fi
    
    local delay=$((RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY))
    sleep $(echo "scale=3; $delay / 1000" | bc)
}

# 生成混合场景
generate_mixed_scenario() {
    local should_error="$1"
    
    case $((RANDOM % 3)) in
        0) generate_order_scenario "$should_error" ;;
        1) generate_payment_scenario "$should_error" ;;
        2) generate_inventory_scenario "$should_error" ;;
    esac
}

# 显示进度
show_progress() {
    if [ "$QUIET" = "true" ]; then
        return 0
    fi
    
    local current="$1"
    local total="$2"
    local start_time="$3"
    
    local percent=$((current * 100 / total))
    local elapsed=$(($(date +%s) - start_time))
    
    local avg_duration=0
    if [ $STATS_TOTAL -gt 0 ]; then
        avg_duration=$((STATS_TOTAL_DURATION / STATS_TOTAL))
    fi
    
    local success_rate=0
    if [ $STATS_TOTAL -gt 0 ]; then
        success_rate=$(echo "scale=1; $STATS_SUCCESS * 100 / $STATS_TOTAL" | bc)
    fi
    
    printf "\r进度: %d/%d (%d%%) | 用时: %ds | 成功率: %s%% | 平均延迟: %dms" \
        "$current" "$total" "$percent" "$elapsed" "$success_rate" "$avg_duration"
}

# 生成追踪数据
generate_traces() {
    log_header "开始生成追踪数据"
    
    # 初始化统计
    STATS_TOTAL=0
    STATS_SUCCESS=0
    STATS_ERROR=0
    STATS_TOTAL_DURATION=0
    
    local start_time=$(date +%s)
    local generated_count=0
    
    if [ -n "$DURATION" ]; then
        # 按时间生成
        log_info "场景: $SCENARIO | 持续时间: ${DURATION}秒 | 速率: ${RATE}RPS | 并发: $CONCURRENCY"
        
        local end_time=$((start_time + DURATION))
        local interval=$(echo "scale=3; 1 / $RATE" | bc)
        
        while [ $(date +%s) -lt $end_time ]; do
            for ((i=0; i<CONCURRENCY; i++)); do
                local should_error="false"
                if [ $((RANDOM % 100)) -lt $ERROR_RATE ]; then
                    should_error="true"
                fi
                
                case "$SCENARIO" in
                    "order") generate_order_scenario "$should_error" & ;;
                    "payment") generate_payment_scenario "$should_error" & ;;
                    "inventory") generate_inventory_scenario "$should_error" & ;;
                    "mixed") generate_mixed_scenario "$should_error" & ;;
                    "error") generate_mixed_scenario "true" & ;;
                esac
                
                ((generated_count++))
            done
            
            # 等待并发请求完成
            wait
            
            show_progress $generated_count $((DURATION * RATE)) $start_time
            
            sleep "$interval"
        done
    else
        # 按数量生成
        log_info "场景: $SCENARIO | 数量: $COUNT | 并发: $CONCURRENCY | 错误率: ${ERROR_RATE}%"
        
        for ((i=1; i<=COUNT; i+=CONCURRENCY)); do
            for ((j=0; j<CONCURRENCY && i+j<=COUNT; j++)); do
                local should_error="false"
                if [ $((RANDOM % 100)) -lt $ERROR_RATE ]; then
                    should_error="true"
                fi
                
                case "$SCENARIO" in
                    "order") generate_order_scenario "$should_error" & ;;
                    "payment") generate_payment_scenario "$should_error" & ;;
                    "inventory") generate_inventory_scenario "$should_error" & ;;
                    "mixed") generate_mixed_scenario "$should_error" & ;;
                    "error") generate_mixed_scenario "true" & ;;
                esac
                
                ((generated_count++))
            done
            
            # 等待当前批次完成
            wait
            
            show_progress $generated_count $COUNT $start_time
        done
    fi
    
    echo  # 换行
    
    local end_time=$(date +%s)
    local total_time=$((end_time - start_time))
    
    log_success "追踪数据生成完成"
    
    # 显示统计信息
    log_header "生成统计"
    echo "  总请求数: $STATS_TOTAL"
    echo "  成功请求: $STATS_SUCCESS"
    echo "  失败请求: $STATS_ERROR"
    if [ $STATS_TOTAL -gt 0 ]; then
        echo "  成功率: $(echo "scale=2; $STATS_SUCCESS * 100 / $STATS_TOTAL" | bc)%"
    else
        echo "  成功率: N/A"
    fi
    echo "  总用时: ${total_time}秒"
    if [ $total_time -gt 0 ]; then
        echo "  平均RPS: $(echo "scale=2; $STATS_TOTAL / $total_time" | bc)"
    else
        echo "  平均RPS: N/A"
    fi
    if [ $STATS_TOTAL -gt 0 ]; then
        echo "  平均延迟: $((STATS_TOTAL_DURATION / STATS_TOTAL))ms"
    fi
    
    # 保存统计信息
    if [ -n "$OUTPUT_FILE" ]; then
        local stats_json=$(cat << EOF
{
    "generated_at": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
    "scenario": "$SCENARIO",
    "parameters": {
        "count": $COUNT,
        "duration": $DURATION,
        "concurrency": $CONCURRENCY,
        "rate": $RATE,
        "error_rate": $ERROR_RATE,
        "min_delay": $MIN_DELAY,
        "max_delay": $MAX_DELAY
    },
    "results": {
        "total_requests": $STATS_TOTAL,
        "successful_requests": $STATS_SUCCESS,
        "failed_requests": $STATS_ERROR,
        "success_rate": $(
            if [ "$STATS_TOTAL" -eq 0 ]; then
                echo "0"
            else
                echo "scale=4; $STATS_SUCCESS * 100 / $STATS_TOTAL" | bc
            fi
        ),
        "total_duration_seconds": $total_time,
        "average_rps": $(
            if [ "$total_time" -eq 0 ]; then
                echo "0"
            else
                echo "scale=4; $STATS_TOTAL / $total_time" | bc
            fi
        ),
        "average_latency_ms": $(
            if [ "$STATS_TOTAL" -eq 0 ]; then
                echo "0"
            else
                echo $(($STATS_TOTAL_DURATION / $STATS_TOTAL))
            fi
        )
    }
}
EOF
        )
        
        echo "$stats_json" > "$OUTPUT_FILE"
        log_info "统计信息已保存到: $OUTPUT_FILE"
    fi
}

# 主函数
main() {
    # 默认参数
    SCENARIO="mixed"
    COUNT=100
    CONCURRENCY=5
    DURATION=""
    RATE=10
    MIN_DELAY=100
    MAX_DELAY=1000
    ERROR_RATE=5
    OUTPUT_FILE=""
    DRY_RUN="false"
    VERBOSE="false"
    QUIET="false"
    FORCE="false"
    
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -s|--scenario)
                SCENARIO="$2"
                shift 2
                ;;
            --scenario=*)
                SCENARIO="${1#*=}"
                shift
                ;;
            -n|--count)
                COUNT="$2"
                shift 2
                ;;
            --count=*)
                COUNT="${1#*=}"
                shift
                ;;
            -c|--concurrency)
                CONCURRENCY="$2"
                shift 2
                ;;
            --concurrency=*)
                CONCURRENCY="${1#*=}"
                shift
                ;;
            -d|--duration)
                DURATION="$2"
                shift 2
                ;;
            --duration=*)
                DURATION="${1#*=}"
                shift
                ;;
            -r|--rate)
                RATE="$2"
                shift 2
                ;;
            --rate=*)
                RATE="${1#*=}"
                shift
                ;;
            --min-delay=*)
                MIN_DELAY="${1#*=}"
                shift
                ;;
            --max-delay=*)
                MAX_DELAY="${1#*=}"
                shift
                ;;
            --error-rate=*)
                ERROR_RATE="${1#*=}"
                shift
                ;;
            --output=*)
                OUTPUT_FILE="${1#*=}"
                shift
                ;;
            --dry-run)
                DRY_RUN="true"
                shift
                ;;
            --verbose)
                VERBOSE="true"
                shift
                ;;
            --quiet)
                QUIET="true"
                shift
                ;;
            --force)
                FORCE="true"
                shift
                ;;
            *)
                log_error "未知选项: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # 验证参数
    if [[ ! "$SCENARIO" =~ ^(order|payment|inventory|mixed|error)$ ]]; then
        log_error "无效的场景类型: $SCENARIO"
        log_info "支持的场景: order, payment, inventory, mixed, error"
        exit 1
    fi
    
    if [ $ERROR_RATE -lt 0 ] || [ $ERROR_RATE -gt 100 ]; then
        log_error "错误率必须在0-100之间: $ERROR_RATE"
        exit 1
    fi
    
    if [ $MIN_DELAY -gt $MAX_DELAY ]; then
        log_error "最小延迟不能大于最大延迟"
        exit 1
    fi
    
    if [ "$QUIET" != "true" ]; then
        show_welcome
    fi
    
    load_config
    check_dependencies
    check_services
    
    if [ "$DRY_RUN" = "true" ]; then
        log_info "干跑模式，仅显示预览信息"
    fi
    
    generate_traces
    
    if [ "$QUIET" != "true" ]; then
        echo
        log_success "追踪数据生成工具执行完成！"
    fi
}

# 执行主函数
main "$@"