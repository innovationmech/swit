# 多阶段构建的 Docker Compose 文件示例
# 可以配合构建脚本使用

# 构建所有服务的 Dockerfile
FROM golang:1.24-alpine AS builder

WORKDIR /app

# 复制源代码
COPY . .

# 设置构建参数
ARG SERVICE_NAME
ARG VERSION=dev
ARG BUILD_TIME
ARG GIT_COMMIT
ARG TARGET_OS=linux
ARG TARGET_ARCH=amd64

# 创建输出目录
RUN mkdir -p _output/build/${SERVICE_NAME}/${TARGET_OS}/${TARGET_ARCH}

# 动态构建指定服务
RUN CGO_ENABLED=0 GOOS=${TARGET_OS} GOARCH=${TARGET_ARCH} go build \
    -trimpath \
    -ldflags "-w -s -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" \
    -o _output/build/${SERVICE_NAME}/${TARGET_OS}/${TARGET_ARCH}/${SERVICE_NAME} \
    ./cmd/${SERVICE_NAME}/${SERVICE_NAME}.go

# 运行时镜像
FROM alpine:latest

# 安装证书和时区数据
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /root/

ARG SERVICE_NAME
ARG TARGET_OS=linux
ARG TARGET_ARCH=amd64

# 复制二进制文件
COPY --from=builder /app/_output/build/${SERVICE_NAME}/${TARGET_OS}/${TARGET_ARCH}/${SERVICE_NAME} .

# 复制配置文件（根据服务类型选择对应的配置文件）
RUN mkdir -p /tmp/configs
COPY ./switauth.yaml ./swit.yaml ./switblog.yaml /tmp/configs/
RUN if [ "${SERVICE_NAME}" = "swit-auth" ]; then \
        cp /tmp/configs/switauth.yaml /root/config.yaml; \
    elif [ "${SERVICE_NAME}" = "swit-serve" ]; then \
        cp /tmp/configs/swit.yaml /root/config.yaml; \
    elif [ "${SERVICE_NAME}" = "switctl" ]; then \
        echo "switctl doesn't need config file"; \
    fi

# 设置标签
LABEL org.opencontainers.image.source=https://github.com/innovationmech/swit

# 动态设置入口点
ENTRYPOINT sh -c "./${SERVICE_NAME}"
