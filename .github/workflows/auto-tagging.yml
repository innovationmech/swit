name: Auto Tagging

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

jobs:
  auto-tag:
    name: Create Auto Tag
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip tag]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'chore: update project badges') &&
      !startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'style:') &&
      !contains(github.event.head_commit.message, 'update badges') &&
      !contains(github.event.head_commit.message, 'Auto-generated by GitHub Actions')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: get_tag
      run: |
        # 获取最新标签
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        
        # 解析版本号
        VERSION=${LATEST_TAG#v}
        
        # 验证版本格式是否为语义化版本
        if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+([+-].+)?$'; then
          echo "⚠️ Warning: Latest tag '$LATEST_TAG' is not a valid semantic version"
          echo "Falling back to v0.0.0 as baseline"
          VERSION="0.0.0"
        fi
        
        # 提取主要版本号（去除预发布和构建元数据）
        BASE_VERSION=$(echo "$VERSION" | sed 's/[+-].*//')
        IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
        
        # 验证版本部分是否为数字
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # 确保所有部分都是数字
        if ! [[ "$MAJOR" =~ ^[0-9]+$ ]]; then
          echo "⚠️ Warning: Major version '$MAJOR' is not numeric, using 0"
          MAJOR=0
        fi
        if ! [[ "$MINOR" =~ ^[0-9]+$ ]]; then
          echo "⚠️ Warning: Minor version '$MINOR' is not numeric, using 0"
          MINOR=0
        fi
        if ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
          echo "⚠️ Warning: Patch version '$PATCH' is not numeric, using 0"
          PATCH=0
        fi
        
        echo "Parsed version: ${MAJOR}.${MINOR}.${PATCH} from tag ${LATEST_TAG}"
        echo "major=${MAJOR}" >> $GITHUB_OUTPUT
        echo "minor=${MINOR}" >> $GITHUB_OUTPUT
        echo "patch=${PATCH}" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: version_bump
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message }}
        VERSION_TYPE: ${{ github.event.inputs.version_type }}
        EVENT_NAME: ${{ github.event_name }}
      run: |
        # 如果是手动触发，使用选择的类型
        if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          BUMP_TYPE="${VERSION_TYPE}"
        else
          # 根据提交消息确定版本更新类型
          if echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?!:|^[a-zA-Z]+(\(.+\))?!:|BREAKING CHANGE"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
        fi
        
        echo "bump_type=${BUMP_TYPE}" >> $GITHUB_OUTPUT
        echo "Determined bump type: ${BUMP_TYPE}"

    - name: Calculate new version
      id: new_version
      run: |
        MAJOR=${{ steps.get_tag.outputs.major }}
        MINOR=${{ steps.get_tag.outputs.minor }}
        PATCH=${{ steps.get_tag.outputs.patch }}
        BUMP_TYPE=${{ steps.version_bump.outputs.bump_type }}
        
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        # 验证计算结果
        if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
          echo "❌ Error: Invalid version components after calculation"
          echo "Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          exit 1
        fi
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        
        # 验证最终版本格式
        if ! echo "${NEW_VERSION#v}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ Error: Generated version '$NEW_VERSION' is not valid"
          exit 1
        fi
        
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "New version: ${NEW_VERSION}"

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        # 创建标签
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "${NEW_VERSION}" -m "Release ${NEW_VERSION}"
        git push origin "${NEW_VERSION}"
        
        echo "Created and pushed tag: ${NEW_VERSION}"

    - name: Create release notes
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        
        echo "## 🚀 Release ${NEW_VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "### 📝 Changes" >> release_notes.md
        
        if [ "${LATEST_TAG}" != "v0.0.0" ]; then
          git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
        else
          echo "- 🎉 Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${NEW_VERSION}" >> release_notes.md
