name: 📚 Deploy Documentation

on:
  push:
    branches: [master]
    paths:
      - 'docs/pages/**'
      - '.github/workflows/docs-deploy.yml'
  # PR 仍然会运行 docs 构建检查（如果你希望保留 build，可单独保留 pull_request 触发。
  # 这里移除对 deploy 的 PR 部署，真正部署仅在合并产生的 push 上进行。）
  pull_request:
    branches: [master]
    paths:
      - 'docs/pages/**'
      - '.github/workflows/docs-deploy.yml'
  schedule:
    # 每天凌晨 2 点同步文档内容
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_sync:
        description: 'Force sync all content'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  contents: write  # 需要写权限以便提交同步的文档
  pages: write
  id-token: write

# 允许一个并发部署
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  DOCS_DIR: './docs/pages'

jobs:
  # 分析文档变更（支持 PR / push）
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      total-changes: ${{ steps.analyze.outputs.total }}
      markdown-changes: ${{ steps.analyze.outputs.markdown }}
      vue-changes: ${{ steps.analyze.outputs.vue }}
      config-changes: ${{ steps.analyze.outputs.config }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyze documentation changes
        id: analyze
        run: |
          echo "🔍 Analyzing documentation changes..."
          echo "Event: $GITHUB_EVENT_NAME  Ref: $GITHUB_REF  Base: $GITHUB_BASE_REF"

          # 计算对比范围：
          # PR: 使用 merge base (github.event.pull_request.base.sha) 与 HEAD
          # push 到 master: 对比 HEAD^...HEAD 以捕获刚合并的 commit 变更
          # 定时/手动: 仍使用 origin/master...HEAD（可能包含多个 commit 聚合变更）
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA...HEAD"
          elif [ "$GITHUB_EVENT_NAME" = "push" ] && [ "$GITHUB_REF" = "refs/heads/master" ]; then
            # 避免整个历史 diff
            RANGE="HEAD^...HEAD"
          else
            RANGE="origin/master...HEAD"
          fi

          echo "Using diff range: $RANGE"
          git diff --name-only $RANGE -- docs/pages/ > changed_files.txt
          
          if [ -s changed_files.txt ]; then
            echo "📝 Changed files:"
            cat changed_files.txt
            
            # 统计变更 - 使用更安全的方法
            TOTAL_CHANGES=$(wc -l < changed_files.txt)
            
            # 统计 Markdown 文件
            MD_CHANGES=$(grep '\.md$' changed_files.txt | wc -l || echo 0)
            
            # 统计 Vue 文件
            VUE_CHANGES=$(grep '\.vue$' changed_files.txt | wc -l || echo 0)
            
            # 统计配置文件
            CONFIG_CHANGES=$(grep -E '\.(json|yaml|yml)$|config' changed_files.txt | wc -l || echo 0)
            
            # 输出结果
            echo "total=${TOTAL_CHANGES}" >> $GITHUB_OUTPUT
            echo "markdown=${MD_CHANGES}" >> $GITHUB_OUTPUT
            echo "vue=${VUE_CHANGES}" >> $GITHUB_OUTPUT
            echo "config=${CONFIG_CHANGES}" >> $GITHUB_OUTPUT
            
            echo "📊 Change summary:"
            echo "  Total files: $TOTAL_CHANGES"
            echo "  Markdown files: $MD_CHANGES"
            echo "  Vue components: $VUE_CHANGES"
            echo "  Config files: $CONFIG_CHANGES"
          else
            echo "📝 No documentation files changed"
            echo "total=0" >> $GITHUB_OUTPUT
            echo "markdown=0" >> $GITHUB_OUTPUT
            echo "vue=0" >> $GITHUB_OUTPUT
            echo "config=0" >> $GITHUB_OUTPUT
          fi

  # 检测文档变更
  detect-changes:
    runs-on: ubuntu-latest
    needs: analyze-changes
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
      content-changed: ${{ steps.changes.outputs.content }}
      force-deploy: ${{ github.event.inputs.force_sync == 'true' || github.event_name == 'schedule' }}
      has-doc-changes: ${{ needs.analyze-changes.outputs.total-changes != '0' }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docs:
              - 'docs/pages/**'
              - '.github/workflows/docs-deploy.yml'
            content:
              - 'README.md'
              - 'api/**'
              - 'internal/**/*.go'
              - 'pkg/**/*.go'

  # 同步内容
  sync-content:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.content-changed == 'true' || needs.detect-changes.outputs.force-deploy == 'true'
    permissions:
      contents: write  # 明确设置写权限
    outputs:
      content_updated: ${{ steps.sync.outputs.content_updated || 'false' }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # 获取完整历史以便正确提交

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔄 Sync documentation content
        id: sync
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔄 Syncing documentation content..."
          
          # 运行内容同步脚本
          if [ -f "scripts/sync-docs.js" ]; then
            node scripts/sync-docs.js
          fi
          
          # 生成 API 文档
          if [ -f "scripts/api-docs-generator.js" ]; then
            node scripts/api-docs-generator.js
          fi
          
          # 检查是否有更改
          if [ -n "$(git status --porcelain)" ]; then
            echo "content_updated=true" >> $GITHUB_OUTPUT
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "📚 Auto-sync documentation content

            🤖 Generated with GitHub Actions
            
            Synced at: $(date -u)"
            git push
          else
            echo "content_updated=false" >> $GITHUB_OUTPUT
            echo "📝 No content changes detected"
          fi

  # 构建文档
  build:
    runs-on: ubuntu-latest
    needs: [analyze-changes, detect-changes, sync-content]
    # PR 场景：如果有 docs 目录变更（来自 paths-filter）或 analyze-changes 有统计则构建
    # push / schedule / workflow_dispatch: 沿用原逻辑
    if: >
      always() && (
        github.event_name == 'pull_request' && (needs.analyze-changes.outputs.total-changes != '0') ||
        needs.detect-changes.outputs.docs-changed == 'true' ||
        needs.analyze-changes.outputs.total-changes != '0' ||
        (needs.sync-content.result == 'success' && needs.sync-content.outputs.content_updated == 'true') ||
        needs.detect-changes.outputs.force-deploy == 'true'
      )
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          npm ci
          echo "📦 Dependencies installed successfully"

      - name: 🔧 Configure build environment
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔧 Configuring build environment..."
          
          # 设置构建环境变量
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "VITE_BUILD_TIME=$(date -u)" >> $GITHUB_ENV
          echo "VITE_COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "VITE_COMMIT_REF=${{ github.ref_name }}" >> $GITHUB_ENV
          
          # 检查配置文件
          if [ ! -f ".vitepress/config.mjs" ]; then
            echo "❌ VitePress config file not found"
            exit 1
          fi

      - name: 🔍 Lint and type check
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔍 Running linting and type checks..."
          
          # ESLint 检查
          if [ -f ".eslintrc.js" ]; then
            npm run lint
          fi
          
          # TypeScript 类型检查
          if [ -f "tsconfig.json" ]; then
            npx vue-tsc --noEmit
          fi

      - name: 🧪 Run tests
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🧪 Running tests..."
          
          # 单元测试
          if npm run test:unit --if-present; then
            echo "✅ Unit tests passed"
          else
            echo "⚠️ Unit tests not available or failed"
          fi
          
          # 可访问性测试（非阻塞）
          if npm run test:accessibility --if-present; then
            echo "✅ Accessibility tests passed"
          else
            echo "⚠️ Accessibility tests not available"
          fi

      - name: 🏗️ Build documentation
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🏗️ Building documentation..."
          npm run build
          
          # 验证构建输出
          if [ ! -d "dist" ]; then
            echo "❌ Build output directory not found"
            exit 1
          fi
          
          # 检查关键文件
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Main index.html not found in build output"
            exit 1
          fi
          
          echo "✅ Documentation built successfully"

      - name: 📊 Analyze bundle size
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "📊 Analyzing bundle size..."
          
          # 生成构建分析报告
          du -sh dist
          find dist -name "*.js" -exec du -h {} \; | sort -hr | head -10
          find dist -name "*.css" -exec du -h {} \; | sort -hr | head -5
          
          # 检查包大小限制
          DIST_SIZE=$(du -s dist | cut -f1)
          MAX_SIZE=50000  # 50MB in KB
          
          if [ $DIST_SIZE -gt $MAX_SIZE ]; then
            echo "⚠️ Build size ($DIST_SIZE KB) exceeds limit ($MAX_SIZE KB)"
          else
            echo "✅ Build size within limits ($DIST_SIZE KB)"
          fi

      - name: 🔧 Prepare deployment files
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔧 Preparing deployment files..."
          
          # 创建 .nojekyll 文件（GitHub Pages）
          touch dist/.nojekyll
          
          # 添加自定义 404 页面
          if [ ! -f "dist/404.html" ]; then
            cp dist/index.html dist/404.html
          fi
          
          # 生成部署信息文件
          cat > dist/deployment-info.json << EOF
          {
            "buildTime": "$(date -u)",
            "commitSha": "${{ github.sha }}",
            "commitRef": "${{ github.ref_name }}",
            "workflow": "${{ github.workflow }}",
            "runId": "${{ github.run_id }}"
          }
          EOF

      - name: 📤 Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.DOCS_DIR }}/dist
  # 部署到 GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    # 仅在合并 PR 后的 master push 执行部署（合并会触发 push 事件且 ref=refs/heads/master）
    if: github.ref == 'refs/heads/master'
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment success notification
        run: |
          echo "🎉 Documentation deployed successfully!"
          echo "📄 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ Deployed at: $(date -u)"

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 🔍 Run Lighthouse CI
        run: |
          lhci autorun || echo "⚠️ Lighthouse CI failed, continuing..."

  # 部署后验证
  post-deploy-verification:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔗 Get deployment URL
        id: get-deploy-url
        run: |
          PAGE_URL="${{ needs.deploy.outputs.page_url }}"
          echo "page_url=${PAGE_URL:-https://docs.example.com}" >> $GITHUB_OUTPUT

      - name: 🧪 Run E2E tests against deployed site
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🧪 Running E2E tests against deployed site..."
          
          # 设置基础 URL 为部署的站点
          export BASE_URL="${{ steps.get-deploy-url.outputs.page_url }}"
          
          # 等待站点可用
          timeout 300 bash -c 'until curl -s "$BASE_URL" > /dev/null; do sleep 5; done'
          
          # 运行 E2E 测试
          if npm run test:e2e:production --if-present; then
            echo "✅ E2E tests passed"
          else
            echo "⚠️ E2E tests not available"
          fi

      - name: 🔍 Verify site accessibility
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔍 Verifying site accessibility..."
          
          # 运行可访问性测试
          if npm run test:accessibility:production --if-present; then
            echo "✅ Accessibility verification passed"
          else
            echo "⚠️ Accessibility tests not available"
          fi

  # 清理和通知
  cleanup-and-notify:
    runs-on: ubuntu-latest
    needs: [deploy, performance-test, post-deploy-verification]
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: 📊 Generate deployment report
        run: |
          echo "📊 Deployment Report"
          echo "=================="
          echo "🚀 Deployment: ${{ needs.deploy.result }}"
          echo "⚡ Performance Test: ${{ needs.performance-test.result }}"
          echo "🔍 Post-Deploy Verification: ${{ needs.post-deploy-verification.result }}"
          echo "⏰ Completed at: $(date -u)"

      - name: 🔔 Notify on failure
        if: failure()
        run: |
          echo "❌ Documentation deployment failed!"
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # 这里可以添加 Slack、Discord 或邮件通知

      - name: 🔗 Get site URL for notification
        id: get-site-url
        run: |
          PAGE_URL="${{ needs.deploy.outputs.page_url }}"
          echo "page_url=${PAGE_URL:-https://docs.example.com}" >> $GITHUB_OUTPUT

      - name: 🎉 Notify on success
        if: success()
        run: |
          echo "✅ Documentation deployment completed successfully!"
          echo "📄 Site: ${{ steps.get-site-url.outputs.page_url }}"