name: Sentry Integration Test

on:
  push:
    branches: [ master, main ]
    paths:
      - 'examples/sentry-example-service/**'
      - 'pkg/server/sentry*'
      - 'pkg/middleware/sentry*'
      - '.github/workflows/sentry-integration-test.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'examples/sentry-example-service/**'
      - 'pkg/server/sentry*'
      - 'pkg/middleware/sentry*'
      - '.github/workflows/sentry-integration-test.yml'
  workflow_dispatch:
    inputs:
      test_real_sentry:
        description: 'Test with real Sentry DSN'
        required: false
        default: 'false'
        type: boolean

env:
  GO_VERSION: '1.23'

# Set minimal permissions for GITHUB_TOKEN
permissions:
  contents: read

jobs:
  sentry-basic-test:
    name: Test Sentry Integration (Basic)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        sentry_mode: [disabled, mock_dsn]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build sentry example service
      run: |
        cd examples/sentry-example-service
        go build -v -o sentry-service main.go

    - name: Test Sentry Disabled Mode
      if: matrix.sentry_mode == 'disabled'
      run: |
        cd examples/sentry-example-service
        echo "Testing Sentry disabled mode..."
        
        # Start service without SENTRY_DSN
        timeout 15s ./sentry-service &
        SERVICE_PID=$!
        
        # Wait for service to start
        sleep 3
        
        # Test health endpoint
        curl -f http://localhost:8090/health || exit 1
        echo "‚úÖ Health check passed"
        
        # Test successful endpoint
        curl -f http://localhost:8090/api/v1/success || exit 1
        echo "‚úÖ Success endpoint works"
        
        # Kill service
        kill $SERVICE_PID 2>/dev/null || true
        wait $SERVICE_PID 2>/dev/null || true
        
        echo "‚úÖ Sentry disabled mode test completed"

    - name: Test Sentry Mock DSN Mode
      if: matrix.sentry_mode == 'mock_dsn'
      run: |
        cd examples/sentry-example-service
        echo "Testing Sentry with mock DSN..."
        
        # Start service with mock DSN
        export SENTRY_DSN="https://test-key@o123456.ingest.sentry.io/123456"
        timeout 15s ./sentry-service &
        SERVICE_PID=$!
        
        # Wait for service to start
        sleep 3
        
        # Test health endpoint (should be ignored by Sentry)
        curl -f http://localhost:8090/health || exit 1
        echo "‚úÖ Health check passed"
        
        # Test successful endpoint
        curl -f http://localhost:8090/api/v1/success || exit 1
        echo "‚úÖ Success endpoint works"
        
        # Test error endpoint (should be captured by Sentry)
        curl -s http://localhost:8090/api/v1/error || true
        echo "‚úÖ Error endpoint triggered (would be sent to Sentry)"
        
        # Test custom Sentry event
        curl -f http://localhost:8090/api/v1/custom-sentry || exit 1
        echo "‚úÖ Custom Sentry event triggered"
        
        # Test user creation with context
        curl -f -X POST http://localhost:8090/api/v1/users || exit 1
        echo "‚úÖ User creation with Sentry context works"
        
        # Kill service
        kill $SERVICE_PID 2>/dev/null || true
        wait $SERVICE_PID 2>/dev/null || true
        
        echo "‚úÖ Sentry mock DSN mode test completed"


    - name: Test Sentry Configuration Validation
      run: |
        cd examples/sentry-example-service
        echo "Testing Sentry configuration validation..."
        
        # Test invalid DSN format
        export SENTRY_DSN="invalid-dsn"
        if timeout 5s ./sentry-service 2>/dev/null; then
          echo "‚ùå Should fail with invalid DSN"
          exit 1
        else
          echo "‚úÖ Correctly rejected invalid DSN"
        fi
        
        echo "‚úÖ Configuration validation test completed"

    - name: Run Unit Tests for Sentry Components
      run: |
        echo "Running unit tests for Sentry-related components..."
        go test -v ./pkg/server -run ".*Sentry.*" || true
        go test -v ./pkg/middleware -run ".*Sentry.*" || true
        echo "‚úÖ Unit tests completed"

    - name: Generate Test Summary
      if: always()
      run: |
        echo "## Sentry Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode**: ${{ matrix.sentry_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Go Version**: ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ All tests passed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        

  sentry-real-dsn-test:
    name: Test Sentry Integration (Real DSN)
    runs-on: ubuntu-latest
    # Only run when explicitly requested or on master branch
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.test_real_sentry == true) || github.ref == 'refs/heads/master' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build sentry example service
      run: |
        cd examples/sentry-example-service
        go build -v -o sentry-service main.go

    - name: Test Sentry Real DSN Mode
      env:
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      run: |
        cd examples/sentry-example-service
        echo "Testing Sentry with real DSN..."
        
        if [ -z "$SENTRY_DSN" ]; then
          echo "‚ö†Ô∏è  SENTRY_DSN secret not configured, skipping real DSN test"
          exit 0
        fi
        
        echo "üöÄ Starting service with real Sentry DSN"
        
        # Start service with real DSN
        timeout 20s ./sentry-service &
        SERVICE_PID=$!
        
        # Wait for service to start
        sleep 5
        
        # Test endpoints that will send real data to Sentry
        echo "üìä Testing endpoints that will send data to Sentry..."
        
        # Test error endpoint (will be sent to Sentry)
        echo "Triggering error endpoint..."
        curl -s http://localhost:8090/api/v1/error || true
        sleep 2
        
        # Test custom Sentry event (will be sent to Sentry)
        echo "Triggering custom Sentry event..."
        curl -f http://localhost:8090/api/v1/custom-sentry || exit 1
        sleep 2
        
        # Test user creation with performance tracking
        echo "Testing user creation with performance tracking..."
        curl -f -X POST http://localhost:8090/api/v1/users || exit 1
        sleep 2
        
        echo "‚úÖ Real Sentry integration test completed"
        echo "üîç Check your Sentry dashboard for new events"
        
        # Kill service gracefully to flush Sentry events
        kill $SERVICE_PID 2>/dev/null || true
        wait $SERVICE_PID 2>/dev/null || true
        
        # Give Sentry time to flush events
        sleep 3

    - name: Generate Test Summary
      if: always()
      run: |
        echo "## Sentry Real DSN Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Go Version**: ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Real DSN test passed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Sentry Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "üîç Check your [Sentry Dashboard](https://sentry.io/) for new events from this test run." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Events sent:**" >> $GITHUB_STEP_SUMMARY
          echo "- HTTP 500 error from `/api/v1/error`" >> $GITHUB_STEP_SUMMARY
          echo "- Custom event from `/api/v1/custom-sentry`" >> $GITHUB_STEP_SUMMARY
          echo "- Performance transaction from `/api/v1/users`" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Real DSN test failed" >> $GITHUB_STEP_SUMMARY
        fi

  notify-completion:
    name: Notify Test Completion
    runs-on: ubuntu-latest
    needs: [sentry-basic-test, sentry-real-dsn-test]
    if: always() && github.event_name == 'workflow_dispatch' && github.event.inputs.test_real_sentry == true
    
    # This job needs additional permissions to write PR comments
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Create completion comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const realDsnStatus = '${{ needs.sentry-real-dsn-test.result }}' === 'success' ? '‚úÖ' : '‚ùå';
          const body = `## Sentry Real DSN Integration Test ${realDsnStatus}
          
          The Sentry real DSN integration test has completed with status: **${{ needs.sentry-real-dsn-test.result }}**
          
          ${realDsnStatus === '‚úÖ' ? 'üîç Check your Sentry dashboard for new events from this test run.' : ''}
          
          <details>
          <summary>Test Details</summary>
          
          - **Workflow**: ${{ github.workflow }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Actor**: ${{ github.actor }}
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });