name: 🔄 Documentation Content Sync

on:
  push:
    branches: [master]
    paths:
      - 'README.md'
      - 'api/**'
      - 'internal/**/*.go'
      - 'pkg/**/*.go'
      - 'examples/**'
      - 'docs/README.md'
  schedule:
    # 每天凌晨 3 点检查内容同步
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Type of content to sync'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - readme
          - api
          - examples
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

# 设置权限
permissions:
  actions: write
  contents: write
  pull-requests: write

# 防止并发执行
concurrency:
  group: "docs-sync"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  DOCS_DIR: './docs/pages'

jobs:
  # 检测源内容变更
  detect-source-changes:
    runs-on: ubuntu-latest
    outputs:
      readme-changed: ${{ steps.changes.outputs.readme }}
      api-changed: ${{ steps.changes.outputs.api }}
      code-changed: ${{ steps.changes.outputs.code }}
      examples-changed: ${{ steps.changes.outputs.examples }}
      force-sync: ${{ github.event.inputs.force_update == 'true' || github.event_name == 'schedule' }}
      sync-type: ${{ github.event.inputs.sync_type || 'all' }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect content changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            readme:
              - 'README.md'
              - 'docs/README.md'
            api:
              - 'api/**'
              - 'internal/**/*.go'
              - 'pkg/**/*.go'
            code:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            examples:
              - 'examples/**'

  # 同步 README 内容
  sync-readme:
    runs-on: ubuntu-latest
    needs: detect-source-changes
    if: |
      needs.detect-source-changes.outputs.readme-changed == 'true' || 
      needs.detect-source-changes.outputs.force-sync == 'true' ||
      contains(needs.detect-source-changes.outputs.sync-type, 'readme') ||
      contains(needs.detect-source-changes.outputs.sync-type, 'all')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔄 Sync README content
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔄 Syncing README content to documentation..."
          
          # 确保同步脚本存在
          if [ ! -f "scripts/sync-docs.js" ]; then
            echo "❌ sync-docs.js script not found"
            exit 1
          fi
          
          # 运行 README 同步
          # 当前 sync-docs.js 仅支持命令: sync|watch|help，不支持 --source 参数
          # 使用默认 sync 执行 README 与附加文档同步
          node scripts/sync-docs.js sync
          
          echo "✅ README content sync completed"

      - name: 📊 Check README changes
        id: readme-changes
        run: |
          if [ -n "$(git status --porcelain -- docs/pages/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 README content changes detected"
            git diff --name-only -- docs/pages/
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📝 No README content changes"
          fi

      - name: 💾 Commit README changes
        if: steps.readme-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/pages/
          git commit -m "📚 Sync README content to documentation

          🔄 Auto-sync from main README.md
          📅 Updated: $(date -u)
          🤖 Generated by GitHub Actions"

  # 同步 API 文档
  sync-api-docs:
    runs-on: ubuntu-latest
    needs: detect-source-changes
    if: |
      needs.detect-source-changes.outputs.api-changed == 'true' || 
      needs.detect-source-changes.outputs.force-sync == 'true' ||
      contains(needs.detect-source-changes.outputs.sync-type, 'api') ||
      contains(needs.detect-source-changes.outputs.sync-type, 'all')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔧 Setup API documentation tools
        run: |
          echo "🔧 Setting up API documentation tools..."
          
          # 安装 Swagger/OpenAPI 工具
          go install github.com/swaggo/swag/cmd/swag@latest
          
          # 验证工具安装
          swag --version

      - name: 📋 Generate API documentation
        run: |
          echo "📋 Generating API documentation..."
          
          # 生成 Swagger 文档
          if [ -d "cmd/swit-serve" ]; then
            cd cmd/swit-serve
            echo "Generating swagger for swit-serve..."
            swag init -g swit-serve.go -o ../../api/swagger/switserve --parseDependency --parseInternal || echo "⚠ swag init swit-serve failed"
            cd ../..
          fi

          if [ -d "cmd/swit-auth" ]; then
            cd cmd/swit-auth
            echo "Generating swagger for swit-auth..."
            swag init -g swit-auth.go -o ../../api/swagger/switauth --parseDependency --parseInternal || echo "⚠ swag init swit-auth failed"
            cd ../..
          fi

          # 若需要更复杂逻辑可改用 scripts/tools/swagger-manage.sh
          
          echo "✅ API documentation generated"

      - name: 🔄 Process API documentation
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔄 Processing API documentation for website..."
          
          # 运行 API 文档处理脚本
          if [ -f "scripts/api-docs-generator.js" ]; then
            # 去除不受支持的 --verbose 参数，按脚本默认行为运行
            node scripts/api-docs-generator.js
          else
            echo "⚠️ API docs generator script not found"
          fi
          
          echo "✅ API documentation processing completed"

      - name: 📊 Check API documentation changes
        id: api-changes
        run: |
          if [ -n "$(git status --porcelain -- docs/pages/ api/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 API documentation changes detected"
            git diff --name-only -- docs/pages/ api/
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📝 No API documentation changes"
          fi

      - name: 💾 Commit API documentation changes
        if: steps.api-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/pages/ api/
          git commit -m "📋 Update API documentation

          🔄 Auto-generated from source code
          📅 Updated: $(date -u)
          🤖 Generated by GitHub Actions"

  # 同步示例代码
  sync-examples:
    runs-on: ubuntu-latest
    needs: detect-source-changes
    if: |
      needs.detect-source-changes.outputs.examples-changed == 'true' || 
      needs.detect-source-changes.outputs.force-sync == 'true' ||
      contains(needs.detect-source-changes.outputs.sync-type, 'examples') ||
      contains(needs.detect-source-changes.outputs.sync-type, 'all')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔄 Sync example code
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔄 Syncing example code to documentation..."
          
          # 运行示例代码同步
          if [ -f "scripts/sync-docs.js" ]; then
            # 仅同步示例 (脚本已支持 examples 子命令/--source=examples)
            node scripts/sync-docs.js examples
          else
            echo "⚠️ Sync script not found"
          fi
          
          echo "✅ Example code sync completed"

      - name: 📊 Check example changes
        id: example-changes
        run: |
          if [ -n "$(git status --porcelain -- docs/pages/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Example code changes detected"
            git diff --name-only -- docs/pages/
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📝 No example code changes"
          fi

      - name: 💾 Commit example changes
        if: steps.example-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/pages/
          git commit -m "📘 Update example code documentation

          🔄 Auto-sync from examples directory
          📅 Updated: $(date -u)
          🤖 Generated by GitHub Actions"

  # 内容验证和质量检查
  validate-content:
    runs-on: ubuntu-latest
    needs: [sync-readme, sync-api-docs, sync-examples]
    if: always() && (needs.sync-readme.result == 'success' || needs.sync-api-docs.result == 'success' || needs.sync-examples.result == 'success')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci

      - name: 🔍 Validate documentation content
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "🔍 Validating documentation content..."
          
          # 运行内容验证
          if [ -f "scripts/content-validator.js" ]; then
            node scripts/content-validator.js
          fi
          
          # 检查 Markdown 格式
          if command -v markdownlint &> /dev/null; then
            markdownlint "**/*.md" --config .markdownlint.json || echo "⚠️ Markdown lint issues found"
          fi
          
          # 检查内部链接
          if npm run validate:links --if-present; then
            echo "✅ Link validation passed"
          else
            echo "⚠️ Link validation not available"
          fi
          
          echo "✅ Content validation completed"

      - name: 📊 Generate content report
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          echo "📊 Generating content sync report..."
          
          # 生成内容统计
          cat > content-sync-report.md << EOF
          # Documentation Content Sync Report
          
          **Generated**: $(date -u)
          **Triggered by**: ${{ github.event_name }}
          **Commit**: ${{ github.sha }}
          
          ## Content Statistics
          
          ### Markdown Files
          \`\`\`
          $(find . -name "*.md" -not -path "./node_modules/*" | wc -l) total files
          $(find . -name "*.md" -not -path "./node_modules/*" -exec wc -l {} + | tail -1 | awk '{print $1}') total lines
          \`\`\`
          
          ### API Documentation
          \`\`\`
          $(find . -path "*/api/*" -name "*.md" | wc -l) API doc files
          \`\`\`
          
          ### Example Code
          \`\`\`
          $(find . -path "*/examples/*" -name "*.md" | wc -l) example files
          \`\`\`
          
          ## Recent Changes
          
          ### Sync Jobs Status
          - README Sync: ${{ needs.sync-readme.result || 'skipped' }}
          - API Docs Sync: ${{ needs.sync-api-docs.result || 'skipped' }}
          - Examples Sync: ${{ needs.sync-examples.result || 'skipped' }}
          EOF
          
          echo "📄 Content report generated"

      - name: 📤 Upload content report
        uses: actions/upload-artifact@v5
        with:
          name: content-sync-report
          path: '${{ env.DOCS_DIR }}/content-sync-report.md'

  # 推送所有更改
  push-changes:
    runs-on: ubuntu-latest
    needs: [sync-readme, sync-api-docs, sync-examples, validate-content]
    if: always() && (needs.sync-readme.result == 'success' || needs.sync-api-docs.result == 'success' || needs.sync-examples.result == 'success')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔄 Pull latest changes
        run: |
          echo "🔄 Pulling latest changes..."
          git pull origin master --rebase || true

      - name: 📤 Push synchronized content
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "📤 Pushing synchronized content..."
            git push origin master
            echo "✅ Content synchronization completed and pushed"
          else
            echo "📝 No changes to push"
          fi

  # 触发文档重新部署
  trigger-deploy:
    runs-on: ubuntu-latest
    needs: push-changes
    # 仅在非 PR 事件运行，避免 fork PR 上的 GITHUB_TOKEN 权限受限导致 403
    if: needs.push-changes.result == 'success' && github.event_name != 'pull_request'
    permissions:
      actions: write
    steps:
      - name: 🚀 Trigger documentation deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docs-deploy.yml',
                ref: 'master',
                inputs: {
                  environment: 'production',
                  force_sync: 'false'
                }
              });
              console.log('🚀 Documentation deployment triggered');
            } catch (err) {
              core.warning(`Failed to trigger docs-deploy: ${err?.status} ${err?.message}`);
              core.warning('Ensure: 1) This job is not running on a fork PR, 2) GITHUB_TOKEN has actions: write (workflow permissions set to Read and write), 3) docs-deploy.yml has workflow_dispatch.');
              throw err;
            }

  # 发送同步报告
  send-sync-report:
    runs-on: ubuntu-latest
    needs: [detect-source-changes, sync-readme, sync-api-docs, sync-examples, validate-content, push-changes]
    if: always()
    steps:
      - name: 📊 Generate sync summary
        run: |
          echo "📊 Documentation Content Sync Summary"
          echo "======================================"
          echo "🕐 Completed at: $(date -u)"
          echo "🔄 Trigger: ${{ github.event_name }}"
          echo ""
          echo "📋 Job Results:"
          echo "  README Sync: ${{ needs.sync-readme.result || 'skipped' }}"
          echo "  API Docs Sync: ${{ needs.sync-api-docs.result || 'skipped' }}"
          echo "  Examples Sync: ${{ needs.sync-examples.result || 'skipped' }}"
          echo "  Content Validation: ${{ needs.validate-content.result || 'skipped' }}"
          echo "  Push Changes: ${{ needs.push-changes.result || 'skipped' }}"
          echo ""
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 🔔 Notify on failure
        if: failure()
        run: |
          echo "❌ Content synchronization failed!"
          echo "Please check the workflow logs for details."
          # 这里可以添加通知到 Slack、Discord 或邮件

      - name: 🎉 Notify on success
        if: success()
        run: |
          echo "✅ Content synchronization completed successfully!"
          echo "📚 Documentation is now up to date."