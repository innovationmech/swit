name: CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  GO_VERSION: '1.23'
  
# 确保所有 status checks 都有明确的状态
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup & Code Quality
    runs-on: ubuntu-latest
    # CI 应该在以下情况运行：
    # 1. 没有 [skip ci] 标记
    # 2. 或者是重要的代码更改（即使有 [skip ci]）
    # 3. 或者是 PR 事件
    if: |
      github.event_name == 'pull_request' ||
      !github.event.head_commit || (
        !contains(github.event.head_commit.message, '[skip ci]') ||
        contains(github.event.head_commit.message, 'feat:') ||
        contains(github.event.head_commit.message, 'fix:') ||
        contains(github.event.head_commit.message, 'security:') ||
        contains(github.event.head_commit.message, 'breaking:')
      )
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      id: cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install Proto tools
      run: make proto-setup

    - name: Install Swagger tools
      run: make swagger-setup

    - name: Install quality tools
      run: make quality-setup

    - name: Run code quality checks
      run: make quality

    # 缓存生成的代码和工具
    - name: Cache generated code and tools
      uses: actions/cache@v4
      with:
        path: |
          api/gen/
          docs/
          ~/.local/bin/
          ~/go/bin/
        key: ${{ runner.os }}-generated-${{ hashFiles('api/proto/**/*.proto', 'cmd/**/*.go', 'internal/**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-generated-

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Restore Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Restore generated code cache
      uses: actions/cache@v4
      with:
        path: |
          api/gen/
          docs/
          ~/.local/bin/
          ~/go/bin/
        key: ${{ runner.os }}-generated-${{ hashFiles('api/proto/**/*.proto', 'cmd/**/*.go', 'internal/**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-generated-

    - name: Install dependencies (if cache miss)
      if: needs.setup.outputs.cache-hit != 'true'
      run: go mod download

    # 使用快速测试模式，跳过依赖生成
    - name: Run tests
      run: make test-dev

    - name: Run tests with race detection
      run: make test-advanced TYPE=race

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Restore Go modules cache
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Restore generated code cache
      uses: actions/cache@v4
      with:
        path: |
          api/gen/
          docs/
          ~/.local/bin/
          ~/go/bin/
        key: ${{ runner.os }}-generated-${{ hashFiles('api/proto/**/*.proto', 'cmd/**/*.go', 'internal/**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-generated-

    - name: Install dependencies (if cache miss)
      if: needs.setup.outputs.cache-hit != 'true'
      run: go mod download

    # 使用快速构建模式，跳过质量检查
    - name: Build binaries
      run: make build-dev

    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: binaries
    #     path: _output/

