name: CI

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/docs-*.yml'
  pull_request:
    branches: [ master, dev ]
  # 注意：不要忽略文档改动，否则必需的状态检查不会产生，PR 无法合并

env:
  GO_VERSION: '1.23'
  GO_VERSION_MATRIX: '["1.23", "1.24"]'

# Set minimal permissions for GITHUB_TOKEN
permissions:
  contents: read
  
# 确保所有 status checks 都有明确的状态
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Filter paths
      id: filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          code:
            - 'go.mod'
            - 'go.sum'
            - '**/*.go'
            - 'api/**'
            - 'cmd/**'
            - 'internal/**'
            - 'pkg/**'
            - 'examples/**'
            - 'scripts/**'
            - '!docs/**'
            - '!.github/workflows/docs-*.yml'

  setup:
    name: Setup & Code Quality
    runs-on: ubuntu-latest
    needs: changes
    # CI 运行条件：
    # - PR 事件：始终运行 CI，无法跳过
    # - push 事件：仅当没有 [skip ci] 标记时运行
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'push' && (
        !github.event.head_commit ||
        !contains(github.event.head_commit.message, '[skip ci]')
      ))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      if: needs.changes.outputs.code_changed == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true
        cache-dependency-path: '**/go.sum'

    - name: Restore tool cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/bin/
          ~/go/bin/
        key: ${{ runner.os }}-go-tools-${{ hashFiles('Makefile', 'scripts/**', 'go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-tools-

    - name: Install dev tools
      if: needs.changes.outputs.code_changed == 'true'
      run: make setup-dev

    - name: Generate proto code (dev)
      if: needs.changes.outputs.code_changed == 'true'
      run: make proto-dev

    - name: Run code quality checks (PR fast)
      if: needs.changes.outputs.code_changed == 'true' && github.event_name == 'pull_request'
      run: make quality-dev

    - name: Run code quality checks (push full)
      if: needs.changes.outputs.code_changed == 'true' && github.event_name == 'push'
      run: make quality

  # 注意：所有测试在 test.yml 工作流中独立运行
  # CI 工作流专注于代码质量检查和构建验证

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      if: needs.changes.outputs.code_changed == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true
        cache-dependency-path: '**/go.sum'

    - name: Restore build cache
      if: needs.changes.outputs.code_changed == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-

    # 使用快速构建模式，跳过质量检查
    - name: Build binaries
      if: github.event_name == 'push' && needs.changes.outputs.code_changed == 'true'
      run: make build-dev

    - name: Skip build (PR or no code changes)
      if: github.event_name != 'push' || needs.changes.outputs.code_changed != 'true'
      run: echo "Skipping build for PR or non-code changes."
