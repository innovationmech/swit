name: Code Coverage

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

permissions:
  contents: read
  pull-requests: write

env:
  GO_VERSION: '1.23'

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    # Â∞ùËØïÊÅ¢Â§ç CI Â∑•‰ΩúÊµÅÁîüÊàêÁöÑ‰ª£Á†ÅÁºìÂ≠ò
    - name: Restore generated code cache
      uses: actions/cache@v4
      with:
        path: |
          api/gen/
          docs/
          ~/.local/bin/
          ~/go/bin/
        key: ${{ runner.os }}-generated-${{ hashFiles('api/proto/**/*.proto', 'api/buf.gen.yaml', 'api/buf.yaml') }}
        restore-keys: |
          ${{ runner.os }}-generated-

    # Âè™Âú®ÁºìÂ≠òÊú™ÂëΩ‰∏≠Êó∂ÈáçÊñ∞ÁîüÊàê‰ª£Á†Å
    - name: Install Proto tools
      run: |
        if [ ! -d "api/gen" ] || [ ! -f "$HOME/.local/bin/protoc" ]; then
          make proto-setup
        fi

    - name: Install Swagger tools  
      run: |
        if [ ! -d "docs" ] || [ ! -f "$HOME/go/bin/swag" ]; then
          make swagger-setup
        fi

    - name: Generate proto code
      run: |
        # Âº∫Âà∂ÈáçÊñ∞ÁîüÊàêproto‰ª£Á†Å‰ª•Á°Æ‰øù‰∏éÂΩìÂâç‰ª£Á†ÅÂ∫ìÂêåÊ≠•
        echo "Generating proto code to ensure consistency..."
        make proto
        
        # È™åËØÅÁîüÊàêÊòØÂê¶ÊàêÂäü
        if [ ! -d "api/gen" ] || [ $(find api/gen -name "*.pb.go" 2>/dev/null | wc -l) -eq 0 ]; then
          echo "‚ùå Proto code generation failed or produced no output"
          exit 1
        fi
        
        echo "‚úÖ Proto code generation completed successfully"

    - name: Generate swagger docs
      run: |
        if [ ! -d "docs" ]; then
          make swagger
        fi

    - name: Run tests with coverage
      id: coverage
      run: |
        # Ëé∑ÂèñÊâÄÊúâÂåÖÔºåÊéíÈô§Ëá™Âä®ÁîüÊàêÁöÑ‰ª£Á†Å
        PACKAGES=$(go list ./... | grep -v -E '/(api/gen|docs/generated)/')
        
        if [ -z "$PACKAGES" ]; then
          echo "No packages to test"
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No packages found to test (all packages excluded or no Go packages exist)"
          exit 0
        fi
        
        echo "Testing packages:"
        echo "$PACKAGES"
        
        # ËøêË°åÊµãËØïÂπ∂ÁîüÊàêË¶ÜÁõñÁéáÊä•Âëä (ÊéíÈô§Ëá™Âä®ÁîüÊàêÁöÑ‰ª£Á†Å)
        go test -v -race -coverprofile=coverage.out -covermode=atomic $PACKAGES
        
        # ÁîüÊàê HTML Êä•Âëä
        go tool cover -html=coverage.out -o coverage.html
        
        # ËÆ°ÁÆóÊÄªË¶ÜÁõñÁéá
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}' || echo "0")
        
        # Á°Æ‰øù COVERAGE ‰∏ç‰∏∫Á©∫ÔºåÈªòËÆ§ËÆæÁΩÆ‰∏∫ 0
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
          COVERAGE="0"
        fi
        
        echo "Total coverage: ${COVERAGE}%"
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Badge
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        # ÁîüÊàêË¶ÜÁõñÁéáÂæΩÁ´†
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        COLOR=""
        
        # Á°Æ‰øù COVERAGE ‰∏ç‰∏∫Á©∫ÔºåÈªòËÆ§ËÆæÁΩÆ‰∏∫ 0
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
          COVERAGE="0"
        fi
        
        # ËΩ¨Êç¢‰∏∫Êï¥Êï∞ËøõË°åÊØîËæÉÔºàÂéªÊéâÂ∞èÊï∞ÁÇπÔºâ
        COVERAGE_INT=$(echo "$COVERAGE" | cut -d. -f1)
        
        # Á°Æ‰øù COVERAGE_INT ÊòØÊúâÊïàÊï∞Â≠óÔºåÈªòËÆ§ËÆæÁΩÆ‰∏∫ 0
        if [ -z "$COVERAGE_INT" ] || [ "$COVERAGE_INT" = "" ]; then
          COVERAGE_INT="0"
        fi
        
        if [ "$COVERAGE_INT" -ge 80 ]; then
          COLOR="brightgreen"
        elif [ "$COVERAGE_INT" -ge 60 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        echo "Coverage: ${COVERAGE}% (${COLOR})"

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = parseFloat('${{ steps.coverage.outputs.coverage }}');
          const body = `## üìä Code Coverage Report
          
          **Coverage**: ${coverage}%
          
          ${coverage >= 80 ? '‚úÖ Great coverage!' : coverage >= 60 ? '‚ö†Ô∏è Coverage could be improved' : '‚ùå Low coverage - please add more tests'}
          
          ---
          *Coverage report generated by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 30
