---
description: 
globs: 
alwaysApply: false
---
# 服务器组件

服务器组件是swit项目的核心部分，由[internal/switserve/server/server.go](mdc:internal/switserve/server/server.go)提供基础实现。

## 主要结构

`Server`结构体是服务器组件的核心，包含以下重要字段：
```go
type Server struct {
    router     *gin.Engine
    sd         *discovery.ServiceDiscovery
    srv        *http.Server
    grpcServer *grpc.Server
}
```

## 主要功能

1. **创建服务器**: 使用`NewServer`函数创建服务器实例，设置路由和服务发现。
   ```go
   server, err := server.NewServer()
   ```

2. **启动服务器**: 调用`Run`方法启动HTTP和gRPC服务器，并注册到服务发现中心。
   ```go
   err := server.Run(地址)
   ```

3. **关闭服务器**: 使用`Shutdown`方法优雅地关闭服务器并从服务发现中心注销。
   ```go
   server.Shutdown()
   ```

## 工作流程

1. 服务启动时:
   - 创建服务器实例
   - 配置路由和中间件
   - 连接到服务发现中心

2. 服务运行时:
   - 同时启动HTTP和gRPC服务
   - 注册服务到服务发现中心

3. 服务关闭时:
   - 优雅关闭HTTP服务器
   - 从服务发现中心注销服务

## 与服务发现的集成

服务器组件在启动时会注册自身到Consul服务发现中心：
```go
port, _ := strconv.Atoi(config.GetConfig().Server.Port)
err := s.sd.RegisterService("swit-serve", "http://localhost", port)
```

关闭时会注销：
```go
s.sd.DeregisterService("swit-serve", "http://localhost", port)
```
