---
description: 
globs: 
alwaysApply: false
---
# 测试编写规范

本项目使用Go的标准测试框架进行测试，测试命令在[Makefile](mdc:Makefile)中定义。

## 测试目录结构

1. 单元测试文件应与被测试的代码文件放在同一目录下
2. 测试文件命名应遵循`{被测试文件名}_test.go`的格式
3. 集成测试可放在单独的`test`目录下

## 测试执行命令

在Makefile中定义了测试执行命令：

```makefile
.PHONY: test
test:
	@$(GO) test -v ./internal/...
```

这个命令会执行`internal`目录下所有包的测试文件。

## 测试函数命名规范

1. 单元测试函数应使用`Test`前缀，后跟被测试的函数名
   ```go
   func TestFunctionName(t *testing.T) {}
   ```

2. 基准测试应使用`Benchmark`前缀
   ```go
   func BenchmarkFunctionName(b *testing.B) {}
   ```

3. 示例测试应使用`Example`前缀
   ```go
   func ExampleFunctionName() {}
   ```

## 表格驱动测试

推荐使用表格驱动测试方式进行单元测试：

```go
func TestValidateToken(t *testing.T) {
    tests := []struct {
        name    string
        token   string
        wantErr bool
    }{
        {"valid token", "valid-token-string", false},
        {"invalid token", "invalid-token", true},
        {"empty token", "", true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            err := ValidateToken(tt.token)
            if (err != nil) != tt.wantErr {
                t.Errorf("ValidateToken() error = %v, wantErr %v", err, tt.wantErr)
            }
        })
    }
}
```

## 模拟和存根

1. 使用接口进行依赖注入，便于在测试中使用模拟对象
2. 对于外部服务依赖，使用模拟对象替代真实服务调用
3. 可以使用`testify/mock`或其他模拟库创建模拟对象

## 测试覆盖率

运行测试覆盖率报告：
```bash
go test -cover ./internal/...
```

生成HTML格式覆盖率报告：
```bash
go test -coverprofile=coverage.out ./internal/...
go tool cover -html=coverage.out
```

## 添加新测试时的注意事项

1. 确保测试独立且可重复执行
2. 避免测试之间的相互依赖
3. 测试应验证行为而不是实现细节
4. 每个测试应明确测试一个功能点
5. 清理测试产生的临时资源
