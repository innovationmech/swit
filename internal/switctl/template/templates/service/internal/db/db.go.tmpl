{{- if .Service.Features.Database -}}
// Copyright Â© {{year}} {{.Author}}
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package db provides database connectivity for {{.Service.Name}}.
package db

import (
	"context"
	"fmt"
	"time"

	"gorm.io/gorm"
	"gorm.io/gorm/logger"
{{- if eq .Service.Database.Type "mysql"}}
	"gorm.io/driver/mysql"
{{- else if eq .Service.Database.Type "postgres"}}
	"gorm.io/driver/postgres"
{{- else if eq .Service.Database.Type "sqlite"}}
	"gorm.io/driver/sqlite"
{{- end}}

	"{{.Service.ModulePath}}/internal/{{.Package.Name}}/config"
	"{{.Service.ModulePath}}/internal/{{.Package.Name}}/model"
)

// Database represents the database connection.
type Database struct {
	db     *gorm.DB
	config *config.DatabaseConfig
}

// NewDatabase creates a new database connection.
func NewDatabase(cfg *config.DatabaseConfig) (*Database, error) {
	var dialector gorm.Dialector

{{- if eq .Service.Database.Type "mysql"}}
	// MySQL connection
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local",
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	dialector = mysql.Open(dsn)
{{- else if eq .Service.Database.Type "postgres"}}
	// PostgreSQL connection
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=disable TimeZone=UTC",
		cfg.Host, cfg.Username, cfg.Password, cfg.Database, cfg.Port)
	dialector = postgres.Open(dsn)
{{- else if eq .Service.Database.Type "sqlite"}}
	// SQLite connection
	dialector = sqlite.Open(cfg.Database)
{{- end}}

	// GORM configuration
	gormConfig := &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	}

	// Open database connection
	db, err := gorm.Open(dialector, gormConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	// Configure connection pool
	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("failed to get sql.DB: %w", err)
	}

	// Connection pool settings
	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetMaxOpenConns(100)
	sqlDB.SetConnMaxLifetime(time.Hour)

	database := &Database{
		db:     db,
		config: cfg,
	}

	// Auto-migrate models
	if err := database.migrate(); err != nil {
		return nil, fmt.Errorf("failed to migrate database: %w", err)
	}

	return database, nil
}

// DB returns the underlying GORM database instance.
func (d *Database) DB() *gorm.DB {
	return d.db
}

// HealthCheck performs a database health check.
func (d *Database) HealthCheck(ctx context.Context) error {
	sqlDB, err := d.db.DB()
	if err != nil {
		return fmt.Errorf("failed to get sql.DB: %w", err)
	}

	// Ping database with context
	if err := sqlDB.PingContext(ctx); err != nil {
		return fmt.Errorf("database ping failed: %w", err)
	}

	return nil
}

// Close closes the database connection.
func (d *Database) Close() error {
	sqlDB, err := d.db.DB()
	if err != nil {
		return fmt.Errorf("failed to get sql.DB: %w", err)
	}

	if err := sqlDB.Close(); err != nil {
		return fmt.Errorf("failed to close database: %w", err)
	}

	return nil
}

// migrate runs database migrations for all models.
func (d *Database) migrate() error {
	// Auto-migrate your models here
	if err := d.db.AutoMigrate(
		&model.{{.Service.Name | pascalCase}}{},
		// Add other models here
	); err != nil {
		return fmt.Errorf("failed to auto-migrate: %w", err)
	}

	return nil
}

// Transaction executes a function within a database transaction.
func (d *Database) Transaction(fn func(*gorm.DB) error) error {
	return d.db.Transaction(fn)
}

// WithContext returns a new database instance with context.
func (d *Database) WithContext(ctx context.Context) *gorm.DB {
	return d.db.WithContext(ctx)
}
{{- end -}}