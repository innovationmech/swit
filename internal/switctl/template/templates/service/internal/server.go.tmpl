// Copyright Â© {{year}} {{.Author}}
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package {{.Package.Name}} provides the {{.Service.Name}} service implementation.
package {{.Package.Name}}

import (
	"context"
	"fmt"

	"github.com/innovationmech/swit/pkg/server"
	"{{.Service.ModulePath}}/internal/{{.Package.Name}}/config"
	"{{.Service.ModulePath}}/internal/{{.Package.Name}}/interfaces"
{{- if .Service.Features.Database}}
	"{{.Service.ModulePath}}/internal/{{.Package.Name}}/db"
{{- end}}
)

// {{.Service.Name | pascalCase}}Server represents the main server instance.
type {{.Service.Name | pascalCase}}Server struct {
	config *config.Config
	server server.BusinessServerCore
{{- if .Service.Features.Database}}
	db     *db.Database
{{- end}}
}

// New{{.Service.Name | pascalCase}}Server creates a new {{.Service.Name}} server instance.
func New{{.Service.Name | pascalCase}}Server(cfg *config.Config) (*{{.Service.Name | pascalCase}}Server, error) {
	s := &{{.Service.Name | pascalCase}}Server{
		config: cfg,
	}

{{- if .Service.Features.Database}}
	// Initialize database
	database, err := db.NewDatabase(&cfg.Database)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize database: %w", err)
	}
	s.db = database
{{- end}}

	// Create server configuration
	serverConfig := &server.ServerConfig{
		ServiceName: "{{.Service.Name}}",
		Version:     "{{.Service.Version}}",
		HTTP: server.HTTPConfig{
			Port: cfg.Server.HTTP.Port,
			Host: cfg.Server.HTTP.Host,
		},
		GRPC: server.GRPCConfig{
			Port: cfg.Server.GRPC.Port,
			Host: cfg.Server.GRPC.Host,
		},
	}

	// Create business server
	baseServer, err := server.NewBusinessServerCore(serverConfig, s, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create business server: %w", err)
	}
	s.server = baseServer

	return s, nil
}

// RegisterServices registers all service components with the server.
func (s *{{.Service.Name | pascalCase}}Server) RegisterServices(registry server.BusinessServiceRegistry) error {
	// Register HTTP handlers
	// TODO: Add HTTP handler registration here

	// Register gRPC services
	// TODO: Add gRPC service registration here

	// Register health check
	healthService := &healthService{
{{- if .Service.Features.Database}}
		db: s.db,
{{- end}}
	}
	
	if err := registry.RegisterBusinessHealthCheck("health", healthService); err != nil {
		return fmt.Errorf("failed to register health check: %w", err)
	}

	return nil
}

// Start starts the server.
func (s *{{.Service.Name | pascalCase}}Server) Start(ctx context.Context) error {
	return s.server.Start(ctx)
}

// Stop stops the server gracefully.
func (s *{{.Service.Name | pascalCase}}Server) Stop(ctx context.Context) error {
	return s.server.Stop(ctx)
}

// GetServiceName returns the service name.
func (s *{{.Service.Name | pascalCase}}Server) GetServiceName() string {
	return "{{.Service.Name}}"
}

// healthService implements basic health checking.
type healthService struct {
{{- if .Service.Features.Database}}
	db *db.Database
{{- end}}
}

// Check performs a health check.
func (h *healthService) Check(ctx context.Context) error {
{{- if .Service.Features.Database}}
	// Check database connectivity
	if err := h.db.HealthCheck(ctx); err != nil {
		return fmt.Errorf("database health check failed: %w", err)
	}
{{- end}}
	return nil
}

// GetServiceName returns the health service name.
func (h *healthService) GetServiceName() string {
	return "health"
}