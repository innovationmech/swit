basePath: /
definitions:
  github_com_innovationmech_swit_internal_switauth_model.ErrorResponse:
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  github_com_innovationmech_swit_internal_switauth_model.HealthResponse:
    properties:
      message:
        example: pong
        type: string
    type: object
  github_com_innovationmech_swit_internal_switauth_model.LoginRequest:
    properties:
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  github_com_innovationmech_swit_internal_switauth_model.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  github_com_innovationmech_swit_internal_switauth_model.LogoutResponse:
    properties:
      message:
        example: Logged out successfully
        type: string
    type: object
  github_com_innovationmech_swit_internal_switauth_model.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  github_com_innovationmech_swit_internal_switauth_model.RefreshTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  github_com_innovationmech_swit_internal_switauth_model.ValidateTokenResponse:
    properties:
      message:
        example: Token is valid
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  model.CreateUserRequest:
    description: Request body for creating a new user
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: secret123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:8090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the SWIT authentication service API documentation.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: SWIT Auth API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password, returns access
        and refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
      summary: User login
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's access token and log them out
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.LogoutResponse'
        "400":
          description: Authorization header is missing
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.RefreshTokenResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
      summary: Refresh access token
      tags:
      - authentication
  /auth/validate:
    get:
      consumes:
      - application/json
      description: Validate an access token and return token information including
        user ID
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ValidateTokenResponse'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/github_com_innovationmech_swit_internal_switauth_model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate access token
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /internal/validate-user:
    post:
      consumes:
      - application/json
      description: Internal API for validating user credentials, used by authentication
        service
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Validation successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Validate user credentials (Internal API)
      tags:
      - internal
  /stop:
    post:
      consumes:
      - application/json
      description: Gracefully shutdown the server
      produces:
      - application/json
      responses:
        "200":
          description: Server is stopping
          schema:
            additionalProperties: true
            type: object
      summary: Stop the server
      tags:
      - admin
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Create a new user with username, email and password
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Get user details by email address
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
  /users/username/{username}:
    get:
      consumes:
      - application/json
      description: Get user details by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by username
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
